<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Ignore build output&#10;/app/build/&#10;&#10;# Ignore local configuration&#10;/local.properties&#10;&#10;# Ignore IDE files&#10;/.idea/&#10;*.iml&#10;&#10;# Ignore Gradle files&#10;/.gradle/&#10;&#10;# Ignore log files&#10;*.log&#10;&#10;# Ignore generated files&#10;/app/src/main/res/raw/&#10;/app/src/main/res/drawable-*/&#10;&#10;# Ignore OS files&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Ignore APKs&#10;*.apk&#10;*.ap_" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/AdminActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/AdminActivity.kt" />
              <option name="updatedContent" value="package com.example.aquatrack&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class AdminActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_admin)&#10;&#10;        findViewById&lt;Button&gt;(R.id.buttonProduction).setOnClickListener {&#10;            startActivity(Intent(this, ProductionActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.buttonStock).setOnClickListener {&#10;            startActivity(Intent(this, StockActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.buttonTester).setOnClickListener {&#10;            startActivity(Intent(this, TesterActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.buttonAccount).setOnClickListener {&#10;            startActivity(Intent(this, AccountActivity::class.java))&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/SecretSettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/SecretSettingsActivity.kt" />
              <option name="originalContent" value="package com.example.aquatrack&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.ContextCompat&#10;import com.example.aquatrack.api.RecordingApiService&#10;import com.example.aquatrack.recording.AudioRecordingService&#10;import com.example.aquatrack.util.NotificationHelper&#10;import com.example.aquatrack.util.WindowManager&#10;&#10;class SecretSettingsActivity : ComponentActivity() {&#10;    private lateinit var requestAudioPermissionLauncher: androidx.activity.result.ActivityResultLauncher&lt;String&gt;&#10;    private var pendingStartService = false&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Permission launcher for RECORD_AUDIO&#10;        requestAudioPermissionLauncher = registerForActivityResult(&#10;            ActivityResultContracts.RequestPermission()&#10;        ) { isGranted -&gt;&#10;            if (isGranted &amp;&amp; pendingStartService) {&#10;                startAudioServiceInternal()&#10;            }&#10;            pendingStartService = false&#10;        }&#10;&#10;        // Configure window behavior&#10;        WindowManager.setUpEdgeToEdge(this)&#10;&#10;        setContent {&#10;            MaterialTheme {&#10;                val phoneId = remember {&#10;                    getSharedPreferences(&quot;microvault&quot;, MODE_PRIVATE)&#10;                        .getInt(&quot;phone_id&quot;, -1)&#10;                }&#10;                var status by remember { mutableStateOf(&quot;Unknown&quot;) }&#10;                val apiService = remember { RecordingApiService(this@SecretSettingsActivity) }&#10;&#10;                // Periodically fetch status every second&#10;                LaunchedEffect(phoneId) {&#10;                    while (true) {&#10;                        if (phoneId != -1) {&#10;                            status = apiService.getStatus(phoneId) ?: &quot;Unknown&quot;&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (phoneId == -1)&#10;                                &quot;Device not registered&quot;&#10;                            else&#10;                                &quot;Device registered (ID: $phoneId)&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.padding(bottom = 32.dp)&#10;                        )&#10;&#10;                        Text(&#10;                            text = &quot;Recording Status: $status&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;&#10;                        Button(&#10;                            onClick = { checkAndStartAudioService() },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Start Service&quot;)&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = { stopService(Intent(this@SecretSettingsActivity, AudioRecordingService::class.java)) },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Stop Service&quot;)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { finish() },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Close&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun checkAndStartAudioService() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) {&#10;            startAudioServiceInternal()&#10;        } else {&#10;            pendingStartService = true&#10;            requestAudioPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO)&#10;        }&#10;    }&#10;&#10;    private fun startAudioServiceInternal() {&#10;        // Ensure notification channel exists&#10;        NotificationHelper.createNotificationChannel(this)&#10;&#10;        val serviceIntent = Intent(this, AudioRecordingService::class.java)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            ContextCompat.startForegroundService(this, serviceIntent)&#10;        } else {&#10;            startService(serviceIntent)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.aquatrack&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.ContextCompat&#10;import com.example.aquatrack.api.RecordingApiService&#10;import com.example.aquatrack.recording.AudioRecordingService&#10;import com.example.aquatrack.util.NotificationHelper&#10;import com.example.aquatrack.util.WindowManager&#10;&#10;class SecretSettingsActivity : ComponentActivity() {&#10;    private lateinit var requestAudioPermissionLauncher: androidx.activity.result.ActivityResultLauncher&lt;String&gt;&#10;    private var pendingStartService = false&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Permission launcher for RECORD_AUDIO&#10;        requestAudioPermissionLauncher = registerForActivityResult(&#10;            ActivityResultContracts.RequestPermission()&#10;        ) { isGranted -&gt;&#10;            if (isGranted &amp;&amp; pendingStartService) {&#10;                startAudioServiceInternal()&#10;            }&#10;            pendingStartService = false&#10;        }&#10;&#10;        // Configure window behavior&#10;        WindowManager.setUpEdgeToEdge(this)&#10;&#10;        setContent {&#10;            MaterialTheme {&#10;                val phoneId = remember {&#10;                    getSharedPreferences(&quot;microvault&quot;, MODE_PRIVATE)&#10;                        .getInt(&quot;phone_id&quot;, -1)&#10;                }&#10;                var status by remember { mutableStateOf(&quot;Unknown&quot;) }&#10;                val apiService = remember { RecordingApiService(this@SecretSettingsActivity) }&#10;&#10;                // Periodically fetch status every second (suspend function)&#10;                LaunchedEffect(phoneId) {&#10;                    while (true) {&#10;                        if (phoneId != -1) {&#10;                            status = apiService.getStatus(phoneId) ?: &quot;Unknown&quot;&#10;                            // Start/stop service based on status&#10;                            if (status == &quot;started&quot;) {&#10;                                if (ContextCompat.checkSelfPermission(this@SecretSettingsActivity, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) {&#10;                                    startAudioServiceInternal()&#10;                                }&#10;                            } else if (status == &quot;stopped&quot;) {&#10;                                stopService(Intent(this@SecretSettingsActivity, AudioRecordingService::class.java))&#10;                            }&#10;                        }&#10;                        kotlinx.coroutines.delay(1000)&#10;                    }&#10;                }&#10;&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (phoneId == -1)&#10;                                &quot;Device not registered&quot;&#10;                            else&#10;                                &quot;Device registered (ID: $phoneId)&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.padding(bottom = 32.dp)&#10;                        )&#10;&#10;                        Text(&#10;                            text = &quot;Recording Status: $status&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;&#10;                        Button(&#10;                            onClick = { checkAndStartAudioService() },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Start Service&quot;)&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = { stopService(Intent(this@SecretSettingsActivity, AudioRecordingService::class.java)) },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Stop Service&quot;)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { finish() },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Close&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun checkAndStartAudioService() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) {&#10;            startAudioServiceInternal()&#10;        } else {&#10;            pendingStartService = true&#10;            requestAudioPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO)&#10;        }&#10;    }&#10;&#10;    private fun startAudioServiceInternal() {&#10;        // Ensure notification channel exists&#10;        NotificationHelper.createNotificationChannel(this)&#10;&#10;        val serviceIntent = Intent(this, AudioRecordingService::class.java)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            ContextCompat.startForegroundService(this, serviceIntent)&#10;        } else {&#10;            startService(serviceIntent)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/BootReceiver.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/BootReceiver.kt" />
              <option name="originalContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import com.example.aquatrack.R&#10;&#10;class BootReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(&quot;BootReceiver&quot;, &quot;Device booted. Showing notification to start service.&quot;)&#10;        showNotification(context)&#10;    }&#10;&#10;    private fun showNotification(context: Context) {&#10;        val channelId = &quot;aquatrack_boot&quot;&#10;        val channelName = &quot;Aqua Track&quot;&#10;        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager&#10;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                channelId,&#10;                channelName,&#10;                NotificationManager.IMPORTANCE_DEFAULT&#10;            )&#10;            channel.description = &quot;Aqua Track notification after boot&quot;&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;&#10;        val intentToStartService = Intent(context, NotificationActionReceiver::class.java)&#10;        val pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            0,&#10;            intentToStartService,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;&#10;        val notification = NotificationCompat.Builder(context, channelId)&#10;            .setSmallIcon(R.drawable.ic_gear) // Replace with your gear icon drawable&#10;            .setContentTitle(&quot;Aqua Track&quot;)&#10;            .setContentText(&quot;Tap to activate service.&quot;)&#10;            .setPriority(NotificationCompat.PRIORITY_DEFAULT)&#10;            .setContentIntent(pendingIntent)&#10;            .setAutoCancel(true)&#10;            .build()&#10;&#10;        notificationManager.notify(1001, notification)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import com.example.aquatrack.R&#10;&#10;class BootReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(&quot;BootReceiver&quot;, &quot;Device booted. Showing notification to start service.&quot;)&#10;        showNotification(context)&#10;    }&#10;&#10;    private fun showNotification(context: Context) {&#10;        val channelId = &quot;aquatrack_boot&quot;&#10;        val channelName = &quot;Aqua Track&quot;&#10;        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager&#10;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                channelId,&#10;                channelName,&#10;                NotificationManager.IMPORTANCE_DEFAULT&#10;            )&#10;            channel.description = &quot;Aqua Track notification after boot&quot;&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;&#10;        val intentToStartService = Intent(context, NotificationActionReceiver::class.java)&#10;        val pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            0,&#10;            intentToStartService,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;&#10;        val notification = NotificationCompat.Builder(context, channelId)&#10;            .setSmallIcon(android.R.drawable.ic_dialog_info) // Temporary system icon&#10;            .setContentTitle(&quot;Aqua Track&quot;)&#10;            .setContentText(&quot;Tap to activate service.&quot;)&#10;            .setPriority(NotificationCompat.PRIORITY_DEFAULT)&#10;            .setContentIntent(pendingIntent)&#10;            .setAutoCancel(true)&#10;            .build()&#10;&#10;        notificationManager.notify(1001, notification)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/NotificationActionReceiver.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/NotificationActionReceiver.kt" />
              <option name="originalContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.util.Log&#10;import androidx.core.content.ContextCompat&#10;import com.example.aquatrack.recording.AudioRecordingService&#10;import com.example.aquatrack.util.NetworkManager&#10;import com.example.aquatrack.util.NotificationHelper&#10;&#10;class NotificationActionReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(TAG, &quot;Notification action received&quot;)&#10;&#10;        // Check network availability before starting service&#10;        if (!NetworkManager.isNetworkAvailable(context)) {&#10;            NotificationHelper.showNotification(&#10;                context = context,&#10;                title = &quot;Network Unavailable&quot;,&#10;                content = &quot;Please check your internet connection and try again&quot;,&#10;                notificationId = NETWORK_ERROR_NOTIFICATION_ID&#10;            )&#10;            return&#10;        }&#10;&#10;                context = context,&#10;                title = &quot;Service Error&quot;,&#10;                content = &quot;Failed to start recording service&quot;,&#10;                notificationId = SERVICE_ERROR_NOTIFICATION_ID&#10;            )&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val TAG = &quot;NotificationReceiver&quot;&#10;        private const val NETWORK_ERROR_NOTIFICATION_ID = 2001&#10;        private const val SERVICE_ERROR_NOTIFICATION_ID = 2002&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.core.content.ContextCompat&#10;import com.example.aquatrack.recording.AudioRecordingService&#10;import com.example.aquatrack.util.NetworkManager&#10;import com.example.aquatrack.util.NotificationHelper&#10;&#10;class NotificationActionReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(TAG, &quot;Notification action received&quot;)&#10;&#10;        // Check network availability before starting service&#10;        if (!NetworkManager.isNetworkAvailable(context)) {&#10;            NotificationHelper.showNotification(&#10;                context = context,&#10;                title = &quot;Network Unavailable&quot;,&#10;                content = &quot;Please check your internet connection and try again&quot;,&#10;                notificationId = NETWORK_ERROR_NOTIFICATION_ID&#10;            )&#10;            return&#10;        }&#10;&#10;        // Check RECORD_AUDIO permission before starting service&#10;        if (ContextCompat.checkSelfPermission(context, android.Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {&#10;            NotificationHelper.showNotification(&#10;                context = context,&#10;                title = &quot;Microphone Permission Required&quot;,&#10;                content = &quot;Please grant microphone permission to start recording&quot;,&#10;                notificationId = NETWORK_ERROR_NOTIFICATION_ID&#10;            )&#10;            Log.e(TAG, &quot;RECORD_AUDIO permission not granted. Service not started.&quot;)&#10;            return&#10;        }&#10;&#10;        val serviceIntent = Intent(context, AudioRecordingService::class.java)&#10;&#10;        try {&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                ContextCompat.startForegroundService(context, serviceIntent)&#10;            } else {&#10;                context.startService(serviceIntent)&#10;            }&#10;            Log.d(TAG, &quot;Service started successfully&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to start service&quot;, e)&#10;            NotificationHelper.showNotification(&#10;                context = context,&#10;                title = &quot;Service Error&quot;,&#10;                content = &quot;Failed to start recording service&quot;,&#10;                notificationId = SERVICE_ERROR_NOTIFICATION_ID&#10;            )&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val TAG = &quot;NotificationReceiver&quot;&#10;        private const val NETWORK_ERROR_NOTIFICATION_ID = 2001&#10;        private const val SERVICE_ERROR_NOTIFICATION_ID = 2002&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/util/ScreenSizeUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/util/ScreenSizeUtil.kt" />
              <option name="originalContent" value="package com.example.aquatrack.util&#10;&#10;import android.content.res.Configuration&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalConfiguration&#10;&#10;object ScreenSizeUtil {&#10;    @Composable&#10;    fun isTablet(): Boolean {&#10;        val configuration = LocalConfiguration.current&#10;        return configuration.screenLayout and&#10;                Configuration.SCREENLAYOUT_SIZE_MASK &gt;=&#10;                Configuration.SCREENLAYOUT_SIZE_LARGE&#10;    }&#10;&#10;    @Composable&#10;    fun isInLandscape(): Boolean {&#10;        val configuration = LocalConfiguration.current&#10;        return configuration.orientation == Configuration.ORIENTATION_LANDSCAPE&#10;    }&#10;&#10;    @Composable&#10;    fun getScreenWidthDp(): Int {&#10;        return LocalConfiguration.current.screenWidthDp&#10;    }&#10;&#10;    @Composable&#10;    fun getScreenHeightDp(): Int {&#10;        return LocalConfiguration.current.screenHeightDp&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.aquatrack.util&#10;&#10;import android.content.res.Configuration&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalConfiguration&#10;&#10;@Composable&#10;fun isTablet(): Boolean {&#10;    val configuration = LocalConfiguration.current&#10;    return configuration.screenLayout and&#10;        Configuration.SCREENLAYOUT_SIZE_MASK &gt;=&#10;        Configuration.SCREENLAYOUT_SIZE_LARGE&#10;}&#10;&#10;@Composable&#10;fun isInLandscape(): Boolean {&#10;    val configuration = LocalConfiguration.current&#10;    return configuration.orientation == Configuration.ORIENTATION_LANDSCAPE&#10;}&#10;&#10;@Composable&#10;fun getScreenWidthDp(): Int {&#10;    return LocalConfiguration.current.screenWidthDp&#10;}&#10;&#10;@Composable&#10;fun getScreenHeightDp(): Int {&#10;    return LocalConfiguration.current.screenHeightDp&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/edittext_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/edittext_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot;/&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot;/&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/blue_primary&quot;/&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/spinner_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/spinner_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot;/&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot;/&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/blue_accent&quot;/&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>