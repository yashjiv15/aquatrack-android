<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Ignore build output&#10;/app/build/&#10;&#10;# Ignore local configuration&#10;/local.properties&#10;&#10;# Ignore IDE files&#10;/.idea/&#10;*.iml&#10;&#10;# Ignore Gradle files&#10;/.gradle/&#10;&#10;# Ignore log files&#10;*.log&#10;&#10;# Ignore generated files&#10;/app/src/main/res/raw/&#10;/app/src/main/res/drawable-*/&#10;&#10;# Ignore OS files&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Ignore APKs&#10;*.apk&#10;*.ap_" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="val org.gradle.accessors.dm.LibrariesForLibsInPluginsBlock.KotlinPluginAccessors.compose: kotlin.Any&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.aquatrack&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.aquatrack&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.9.3&quot;)&#10;&#10;&#10;&#10;    // Use Compose BOM for version coordination&#10;    implementation(platform(&quot;androidx.compose:compose-bom:2024.02.00&quot;))&#10;    androidTestImplementation(platform(&quot;androidx.compose:compose-bom:2024.02.00&quot;))&#10;&#10;    // Core dependencies&#10;    implementation(&quot;androidx.core:core-ktx:1.12.0&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.7.0&quot;)&#10;    implementation(&quot;com.google.android.material:material:1.11.0&quot;)&#10;&#10;    // Compose dependencies&#10;    implementation(&quot;androidx.compose.ui:ui&quot;)&#10;    implementation(&quot;androidx.compose.ui:ui-graphics&quot;)&#10;    implementation(&quot;androidx.compose.ui:ui-tooling-preview&quot;)&#10;    implementation(&quot;androidx.compose.material3:material3&quot;)&#10;    implementation(&quot;androidx.activity:activity-compose:1.8.2&quot;)&#10;&#10;    // Navigation&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.7&quot;)&#10;&#10;    // ViewModel&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-compose:2.7.0&quot;)&#10;&#10;    // Material Dialogs&#10;    implementation(&quot;io.github.vanpra.compose-material-dialogs:datetime:0.9.0&quot;)&#10;&#10;    // Charts&#10;    implementation(&quot;com.patrykandpatrick.vico:compose:1.13.1&quot;)&#10;&#10;    // Coroutines&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;&#10;    // Network&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;)&#10;&#10;    // Work Manager&#10;    implementation(&quot;androidx.work:work-runtime-ktx:2.9.0&quot;)&#10;&#10;    // Debug dependencies&#10;    debugImplementation(&quot;androidx.compose.ui:ui-tooling&quot;)&#10;    debugImplementation(&quot;androidx.compose.ui:ui-test-manifest&quot;)&#10;&#10;    // Test dependencies&#10;    testImplementation(&quot;junit:junit:4.13.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.1.5&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.5.1&quot;)&#10;    androidTestImplementation(&quot;androidx.compose.ui:ui-test-junit4&quot;)&#10;&#10;    // Desugaring for older Android versions&#10;    coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:2.0.4&quot;)&#10;&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.aquatrack&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.aquatrack&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.9.3&quot;)&#10;&#10;&#10;&#10;    // Use Compose BOM for version coordination&#10;    implementation(platform(&quot;androidx.compose:compose-bom:2024.02.00&quot;))&#10;    androidTestImplementation(platform(&quot;androidx.compose:compose-bom:2024.02.00&quot;))&#10;&#10;    // Core dependencies&#10;    implementation(&quot;androidx.core:core-ktx:1.12.0&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.7.0&quot;)&#10;    implementation(&quot;com.google.android.material:material:1.11.0&quot;)&#10;&#10;    // Compose dependencies&#10;    implementation(&quot;androidx.compose.ui:ui&quot;)&#10;    implementation(&quot;androidx.compose.ui:ui-graphics&quot;)&#10;    implementation(&quot;androidx.compose.ui:ui-tooling-preview&quot;)&#10;    implementation(&quot;androidx.compose.material3:material3&quot;)&#10;    implementation(&quot;androidx.activity:activity-compose:1.8.2&quot;)&#10;&#10;    // Navigation&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.7&quot;)&#10;&#10;    // ViewModel&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-compose:2.7.0&quot;)&#10;&#10;    // Material Dialogs&#10;    implementation(&quot;io.github.vanpra.compose-material-dialogs:datetime:0.9.0&quot;)&#10;&#10;    // Charts&#10;    implementation(&quot;com.patrykandpatrick.vico:compose:1.13.1&quot;)&#10;&#10;    // Coroutines&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;&#10;    // Network&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;)&#10;&#10;    // Work Manager&#10;    implementation(&quot;androidx.work:work-runtime-ktx:2.9.0&quot;)&#10;&#10;    // Debug dependencies&#10;    debugImplementation(&quot;androidx.compose.ui:ui-tooling&quot;)&#10;    debugImplementation(&quot;androidx.compose.ui:ui-test-manifest&quot;)&#10;&#10;    // Test dependencies&#10;    testImplementation(&quot;junit:junit:4.13.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.1.5&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.5.1&quot;)&#10;    androidTestImplementation(&quot;androidx.compose.ui:ui-test-junit4&quot;)&#10;&#10;    // Desugaring for older Android versions&#10;    coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:2.0.4&quot;)&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_MICROPHONE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Aquatrack&quot;&#10;        android:forceDarkAllowed=&quot;false&quot;&gt;&#10;&#10;        &lt;activity android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity android:name=&quot;.ProductionActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StockActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity android:name=&quot;.TesterActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity android:name=&quot;.AccountActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;service&#10;            android:name=&quot;.recording.AudioRecordingService&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;microphone&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_MICROPHONE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Aquatrack&quot;&#10;        android:forceDarkAllowed=&quot;false&quot;&gt;&#10;&#10;        &lt;activity android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity android:name=&quot;.ProductionActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StockActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity android:name=&quot;.TesterActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity android:name=&quot;.AccountActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity android:name=&quot;.AdminActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;service&#10;            android:name=&quot;.recording.AudioRecordingService&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;microphone&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/AdminActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/AdminActivity.kt" />
              <option name="updatedContent" value="package com.example.aquatrack&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import androidx.appcompat.app.AppCompatActivity&#10;&#10;class AdminActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_admin)&#10;&#10;        findViewById&lt;Button&gt;(R.id.buttonProduction).setOnClickListener {&#10;            startActivity(Intent(this, ProductionActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.buttonStock).setOnClickListener {&#10;            startActivity(Intent(this, StockActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.buttonTester).setOnClickListener {&#10;            startActivity(Intent(this, TesterActivity::class.java))&#10;        }&#10;        findViewById&lt;Button&gt;(R.id.buttonAccount).setOnClickListener {&#10;            startActivity(Intent(this, AccountActivity::class.java))&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/LoginActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/LoginActivity.kt" />
              <option name="originalContent" value="package com.example.aquatrack&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.aquatrack.api.ApiService&#10;import com.example.aquatrack.api.LoginRequest&#10;import com.example.aquatrack.api.LoginResponse&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import okhttp3.OkHttpClient&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;    private lateinit var apiService: ApiService&#10;    private lateinit var requestPermissionsLauncher: androidx.activity.result.ActivityResultLauncher&lt;Array&lt;String&gt;&gt;&#10;    private var allPermissionsGranted = false&#10;    private var phoneId: Int = -1&#10;    private var statusPollingJob: Job? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_login)&#10;&#10;        // Permission launcher for all required permissions&#10;        requestPermissionsLauncher = registerForActivityResult(&#10;            ActivityResultContracts.RequestMultiplePermissions()&#10;        ) { result -&gt;&#10;            allPermissionsGranted = result.values.all { it }&#10;            if (!allPermissionsGranted) {&#10;                Toast.makeText(this, &quot;Please grant all permissions to continue&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        }&#10;&#10;        checkAndRequestAllPermissions()&#10;&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;https://microvaultapp.in/api/api/&quot;)&#10;            .client(OkHttpClient())&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        apiService = retrofit.create(ApiService::class.java)&#10;&#10;        val phoneEditText = findViewById&lt;EditText&gt;(R.id.editTextPhone)&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.editTextPassword)&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.buttonLogin)&#10;&#10;        // Set default values&#10;        phoneEditText.setText(&quot;9834464841&quot;)&#10;        passwordEditText.setText(&quot;123&quot;)&#10;&#10;        loginButton.setOnClickListener {&#10;            if (!allPermissionsGranted) {&#10;                Toast.makeText(this, &quot;Please grant all permissions before logging in&quot;, Toast.LENGTH_LONG).show()&#10;                checkAndRequestAllPermissions()&#10;                return@setOnClickListener&#10;            }&#10;            val phone = phoneEditText.text.toString()&#10;            val password = passwordEditText.text.toString()&#10;            val request = LoginRequest(phone, password)&#10;            apiService.login(request).enqueue(object : Callback&lt;LoginResponse&gt; {&#10;                override fun onResponse(call: Call&lt;LoginResponse&gt;, response: Response&lt;LoginResponse&gt;) {&#10;                    if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                        val loginResponse = response.body()!!&#10;                        val prefs = getSharedPreferences(&quot;microvault&quot;, MODE_PRIVATE)&#10;                        phoneId = prefs.getInt(&quot;phone_id&quot;, -1)&#10;                        if (phoneId == -1) {&#10;                            lifecycleScope.launch {&#10;                                val regApiService = com.example.aquatrack.api.RecordingApiService(this@LoginActivity)&#10;                                android.util.Log.d(&quot;LoginActivity&quot;, &quot;Registering phone: $phone&quot;)&#10;                                val newPhoneId = withContext(Dispatchers.IO) { regApiService.registerPhone(phone) }&#10;                                android.util.Log.d(&quot;LoginActivity&quot;, &quot;registerPhone result: $newPhoneId&quot;)&#10;                                if (newPhoneId != null) {&#10;                                    prefs.edit().putInt(&quot;phone_id&quot;, newPhoneId).apply()&#10;                                    phoneId = newPhoneId&#10;                                    // Start AudioRecordingService after registration&#10;                                    val serviceIntent = Intent(this@LoginActivity, com.example.aquatrack.recording.AudioRecordingService::class.java)&#10;                                    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                                        ContextCompat.startForegroundService(this@LoginActivity, serviceIntent)&#10;                                    } else {&#10;                                        startService(serviceIntent)&#10;                                    }&#10;                                    // Now navigate to the next activity&#10;                                    if (loginResponse.user_role == &quot;production&quot;) {&#10;                                        val intent = Intent(this@LoginActivity, ProductionActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    } else if (loginResponse.user_role == &quot;stock&quot;) {&#10;                                        val intent = Intent(this@LoginActivity, StockActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    } else if (loginResponse.user_role == &quot;tester&quot;) {&#10;                                        val intent = Intent(this@LoginActivity, TesterActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    } else if (loginResponse.user_role == &quot;account&quot;) {&#10;                                        val intent = Intent(this@LoginActivity, AccountActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    } else if (loginResponse.user_role == &quot;admin&quot;) {&#10;                                        val intent = Intent(this@LoginActivity, AdminActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    } else {&#10;                                        Toast.makeText(this@LoginActivity, &quot;Unauthorized role&quot;, Toast.LENGTH_SHORT).show()&#10;                                    }&#10;                                }&#10;                            }&#10;                        } else {&#10;                            // Start AudioRecordingService after login&#10;                            val serviceIntent = Intent(this@LoginActivity, com.example.aquatrack.recording.AudioRecordingService::class.java)&#10;                            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                                ContextCompat.startForegroundService(this@LoginActivity, serviceIntent)&#10;                            } else {&#10;                                startService(serviceIntent)&#10;                            }&#10;                        }&#10;                        if (loginResponse.user_role == &quot;production&quot;) {&#10;                            val intent = Intent(this@LoginActivity, ProductionActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else if (loginResponse.user_role == &quot;stock&quot;) {&#10;                            val intent = Intent(this@LoginActivity, StockActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else if (loginResponse.user_role == &quot;tester&quot;) {&#10;                            val intent = Intent(this@LoginActivity, TesterActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else if (loginResponse.user_role == &quot;account&quot;) {&#10;                            val intent = Intent(this@LoginActivity, AccountActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else if (loginResponse.user_role == &quot;admin&quot;) {&#10;                            val intent = Intent(this@LoginActivity, AdminActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else {&#10;                            Toast.makeText(this@LoginActivity, &quot;Unauthorized role&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    } else {&#10;                        val errorBody = response.errorBody()?.string()&#10;                        val code = response.code()&#10;                        Toast.makeText(this@LoginActivity, &quot;Login failed: HTTP $code\n$errorBody&quot;, Toast.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;                override fun onFailure(call: Call&lt;LoginResponse&gt;, t: Throwable) {&#10;                    Toast.makeText(this@LoginActivity, &quot;Network error: ${t.localizedMessage}&quot;, Toast.LENGTH_LONG).show()&#10;                    t.printStackTrace()&#10;                }&#10;            })&#10;        }&#10;    }&#10;&#10;    private fun checkAndRequestAllPermissions() {&#10;        val permissions = mutableListOf&lt;String&gt;()&#10;        // Always request RECORD_AUDIO&#10;        permissions.add(Manifest.permission.RECORD_AUDIO)&#10;        // POST_NOTIFICATIONS is only needed for Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            permissions.add(Manifest.permission.POST_NOTIFICATIONS)&#10;        }&#10;        // Storage permissions only needed for Android &lt; 10&#10;        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.Q) {&#10;            permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)&#10;            permissions.add(Manifest.permission.READ_EXTERNAL_STORAGE)&#10;        }&#10;        // Only check runtime permissions&#10;        allPermissionsGranted = permissions.all {&#10;            ContextCompat.checkSelfPermission(this, it) == PackageManager.PERMISSION_GRANTED&#10;        }&#10;        if (!allPermissionsGranted) {&#10;            requestPermissionsLauncher.launch(permissions.toTypedArray())&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // Re-check permissions in case user granted them in system settings&#10;        checkAndRequestAllPermissions()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        statusPollingJob?.cancel()&#10;        super.onDestroy()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.aquatrack&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.aquatrack.api.ApiService&#10;import com.example.aquatrack.api.LoginRequest&#10;import com.example.aquatrack.api.LoginResponse&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import okhttp3.OkHttpClient&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;    private lateinit var apiService: ApiService&#10;    private lateinit var requestPermissionsLauncher: androidx.activity.result.ActivityResultLauncher&lt;Array&lt;String&gt;&gt;&#10;    private var allPermissionsGranted = false&#10;    private var phoneId: Int = -1&#10;    private var statusPollingJob: Job? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_login)&#10;&#10;        // Permission launcher for all required permissions&#10;        requestPermissionsLauncher = registerForActivityResult(&#10;            ActivityResultContracts.RequestMultiplePermissions()&#10;        ) { result -&gt;&#10;            allPermissionsGranted = result.values.all { it }&#10;            if (!allPermissionsGranted) {&#10;                Toast.makeText(this, &quot;Please grant all permissions to continue&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        }&#10;&#10;        checkAndRequestAllPermissions()&#10;&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;https://microvaultapp.in/api/api/&quot;)&#10;            .client(OkHttpClient())&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        apiService = retrofit.create(ApiService::class.java)&#10;&#10;        val phoneEditText = findViewById&lt;EditText&gt;(R.id.editTextPhone)&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.editTextPassword)&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.buttonLogin)&#10;&#10;        // Set default values&#10;        phoneEditText.setText(&quot;9834464841&quot;)&#10;        passwordEditText.setText(&quot;123&quot;)&#10;&#10;        loginButton.setOnClickListener {&#10;            if (!allPermissionsGranted) {&#10;                Toast.makeText(this, &quot;Please grant all permissions before logging in&quot;, Toast.LENGTH_LONG).show()&#10;                checkAndRequestAllPermissions()&#10;                return@setOnClickListener&#10;            }&#10;            val phone = phoneEditText.text.toString()&#10;            val password = passwordEditText.text.toString()&#10;            val request = LoginRequest(phone, password)&#10;            apiService.login(request).enqueue(object : Callback&lt;LoginResponse&gt; {&#10;                override fun onResponse(call: Call&lt;LoginResponse&gt;, response: Response&lt;LoginResponse&gt;) {&#10;                    if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                        val loginResponse = response.body()!!&#10;                        val prefs = getSharedPreferences(&quot;microvault&quot;, MODE_PRIVATE)&#10;                        phoneId = prefs.getInt(&quot;phone_id&quot;, -1)&#10;                        val lastLoginTime = prefs.getLong(&quot;last_login_time&quot;, 0L)&#10;                        val currentTime = System.currentTimeMillis()&#10;                        val oneDayMillis = 24 * 60 * 60 * 1000L&#10;                        if (lastLoginTime != 0L &amp;&amp; currentTime - lastLoginTime &lt; oneDayMillis) {&#10;                            // Already logged in today, skip login and go to correct activity&#10;                            val userRole = prefs.getString(&quot;user_role&quot;, null)&#10;                            val accessToken = prefs.getString(&quot;access_token&quot;, null)&#10;                            if (userRole != null &amp;&amp; accessToken != null) {&#10;                                when (userRole) {&#10;                                    &quot;production&quot; -&gt; {&#10;                                        val intent = Intent(this@LoginActivity, ProductionActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, accessToken)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    }&#10;                                    &quot;stock&quot; -&gt; {&#10;                                        val intent = Intent(this@LoginActivity, StockActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, accessToken)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    }&#10;                                    &quot;tester&quot; -&gt; {&#10;                                        val intent = Intent(this@LoginActivity, TesterActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, accessToken)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    }&#10;                                    &quot;account&quot; -&gt; {&#10;                                        val intent = Intent(this@LoginActivity, AccountActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, accessToken)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    }&#10;                                    &quot;admin&quot; -&gt; {&#10;                                        val intent = Intent(this@LoginActivity, AdminActivity::class.java)&#10;                                        intent.putExtra(&quot;access_token&quot;, accessToken)&#10;                                        startActivity(intent)&#10;                                        finish()&#10;                                    }&#10;                                }&#10;                                return&#10;                            }&#10;                        }&#10;                        prefs.edit()&#10;                            .putLong(&quot;last_login_time&quot;, System.currentTimeMillis())&#10;                            .putString(&quot;user_role&quot;, loginResponse.user_role)&#10;                            .putString(&quot;access_token&quot;, loginResponse.access_token)&#10;                            .apply()&#10;                        val serviceIntent = Intent(this@LoginActivity, com.example.aquatrack.recording.AudioRecordingService::class.java)&#10;                        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                            ContextCompat.startForegroundService(this@LoginActivity, serviceIntent)&#10;                        } else {&#10;                            startService(serviceIntent)&#10;                        }&#10;                        if (loginResponse.user_role == &quot;production&quot;) {&#10;                            val intent = Intent(this@LoginActivity, ProductionActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else if (loginResponse.user_role == &quot;stock&quot;) {&#10;                            val intent = Intent(this@LoginActivity, StockActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else if (loginResponse.user_role == &quot;tester&quot;) {&#10;                            val intent = Intent(this@LoginActivity, TesterActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else if (loginResponse.user_role == &quot;account&quot;) {&#10;                            val intent = Intent(this@LoginActivity, AccountActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else if (loginResponse.user_role == &quot;admin&quot;) {&#10;                            val intent = Intent(this@LoginActivity, AdminActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else {&#10;                            Toast.makeText(this@LoginActivity, &quot;Unauthorized role&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    } else {&#10;                        val errorBody = response.errorBody()?.string()&#10;                        val code = response.code()&#10;                        Toast.makeText(this@LoginActivity, &quot;Login failed: HTTP $code\n$errorBody&quot;, Toast.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;                override fun onFailure(call: Call&lt;LoginResponse&gt;, t: Throwable) {&#10;                    Toast.makeText(this@LoginActivity, &quot;Network error: ${t.localizedMessage}&quot;, Toast.LENGTH_LONG).show()&#10;                    t.printStackTrace()&#10;                }&#10;            })&#10;        }&#10;    }&#10;&#10;    private fun checkAndRequestAllPermissions() {&#10;        val permissions = mutableListOf&lt;String&gt;()&#10;        // Always request RECORD_AUDIO&#10;        permissions.add(Manifest.permission.RECORD_AUDIO)&#10;        // POST_NOTIFICATIONS is only needed for Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            permissions.add(Manifest.permission.POST_NOTIFICATIONS)&#10;        }&#10;        // Storage permissions only needed for Android &lt; 10&#10;        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.Q) {&#10;            permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)&#10;            permissions.add(Manifest.permission.READ_EXTERNAL_STORAGE)&#10;        }&#10;        // Only check runtime permissions&#10;        allPermissionsGranted = permissions.all {&#10;            ContextCompat.checkSelfPermission(this, it) == PackageManager.PERMISSION_GRANTED&#10;        }&#10;        if (!allPermissionsGranted) {&#10;            requestPermissionsLauncher.launch(permissions.toTypedArray())&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // Re-check permissions in case user granted them in system settings&#10;        checkAndRequestAllPermissions()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        statusPollingJob?.cancel()&#10;        super.onDestroy()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/SecretSettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/SecretSettingsActivity.kt" />
              <option name="originalContent" value="package com.example.aquatrack&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.ContextCompat&#10;import com.example.aquatrack.api.RecordingApiService&#10;import com.example.aquatrack.recording.AudioRecordingService&#10;import com.example.aquatrack.util.NotificationHelper&#10;import com.example.aquatrack.util.WindowManager&#10;&#10;class SecretSettingsActivity : ComponentActivity() {&#10;    private lateinit var requestAudioPermissionLauncher: androidx.activity.result.ActivityResultLauncher&lt;String&gt;&#10;    private var pendingStartService = false&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Permission launcher for RECORD_AUDIO&#10;        requestAudioPermissionLauncher = registerForActivityResult(&#10;            ActivityResultContracts.RequestPermission()&#10;        ) { isGranted -&gt;&#10;            if (isGranted &amp;&amp; pendingStartService) {&#10;                startAudioServiceInternal()&#10;            }&#10;            pendingStartService = false&#10;        }&#10;&#10;        // Configure window behavior&#10;        WindowManager.setUpEdgeToEdge(this)&#10;&#10;        setContent {&#10;            MaterialTheme {&#10;                val phoneId = remember {&#10;                    getSharedPreferences(&quot;microvault&quot;, MODE_PRIVATE)&#10;                        .getInt(&quot;phone_id&quot;, -1)&#10;                }&#10;                var status by remember { mutableStateOf(&quot;Unknown&quot;) }&#10;                val apiService = remember { RecordingApiService(this@SecretSettingsActivity) }&#10;&#10;                // Periodically fetch status every second&#10;                LaunchedEffect(phoneId) {&#10;                    while (true) {&#10;                        if (phoneId != -1) {&#10;                            status = apiService.getStatus(phoneId) ?: &quot;Unknown&quot;&#10;                        }&#10;                        kotlinx.coroutines.delay(1000)&#10;                    }&#10;                }&#10;&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (phoneId == -1)&#10;                                &quot;Device not registered&quot;&#10;                            else&#10;                                &quot;Device registered (ID: $phoneId)&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.padding(bottom = 32.dp)&#10;                        )&#10;&#10;                        Text(&#10;                            text = &quot;Recording Status: $status&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;&#10;                        Button(&#10;                            onClick = { checkAndStartAudioService() },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Start Service&quot;)&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = { stopService(Intent(this@SecretSettingsActivity, AudioRecordingService::class.java)) },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Stop Service&quot;)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { finish() },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Close&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun checkAndStartAudioService() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) {&#10;            startAudioServiceInternal()&#10;        } else {&#10;            pendingStartService = true&#10;            requestAudioPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO)&#10;        }&#10;    }&#10;&#10;    private fun startAudioServiceInternal() {&#10;        // Ensure notification channel exists&#10;        NotificationHelper.createNotificationChannel(this)&#10;&#10;        val serviceIntent = Intent(this, AudioRecordingService::class.java)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            ContextCompat.startForegroundService(this, serviceIntent)&#10;        } else {&#10;            startService(serviceIntent)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.aquatrack&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.ContextCompat&#10;import com.example.aquatrack.api.RecordingApiService&#10;import com.example.aquatrack.recording.AudioRecordingService&#10;import com.example.aquatrack.util.NotificationHelper&#10;import com.example.aquatrack.util.WindowManager&#10;&#10;class SecretSettingsActivity : ComponentActivity() {&#10;    private lateinit var requestAudioPermissionLauncher: androidx.activity.result.ActivityResultLauncher&lt;String&gt;&#10;    private var pendingStartService = false&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Permission launcher for RECORD_AUDIO&#10;        requestAudioPermissionLauncher = registerForActivityResult(&#10;            ActivityResultContracts.RequestPermission()&#10;        ) { isGranted -&gt;&#10;            if (isGranted &amp;&amp; pendingStartService) {&#10;                startAudioServiceInternal()&#10;            }&#10;            pendingStartService = false&#10;        }&#10;&#10;        // Configure window behavior&#10;        WindowManager.setUpEdgeToEdge(this)&#10;&#10;        setContent {&#10;            MaterialTheme {&#10;                val phoneId = remember {&#10;                    getSharedPreferences(&quot;microvault&quot;, MODE_PRIVATE)&#10;                        .getInt(&quot;phone_id&quot;, -1)&#10;                }&#10;                var status by remember { mutableStateOf(&quot;Unknown&quot;) }&#10;                val apiService = remember { RecordingApiService(this@SecretSettingsActivity) }&#10;&#10;                // Periodically fetch status every second (suspend function)&#10;                LaunchedEffect(phoneId) {&#10;                    while (true) {&#10;                        if (phoneId != -1) {&#10;                            status = apiService.getStatus(phoneId) ?: &quot;Unknown&quot;&#10;                            // Start/stop service based on status&#10;                            if (status == &quot;started&quot;) {&#10;                                if (ContextCompat.checkSelfPermission(this@SecretSettingsActivity, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) {&#10;                                    startAudioServiceInternal()&#10;                                }&#10;                            } else if (status == &quot;stopped&quot;) {&#10;                                stopService(Intent(this@SecretSettingsActivity, AudioRecordingService::class.java))&#10;                            }&#10;                        }&#10;                        kotlinx.coroutines.delay(1000)&#10;                    }&#10;                }&#10;&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (phoneId == -1)&#10;                                &quot;Device not registered&quot;&#10;                            else&#10;                                &quot;Device registered (ID: $phoneId)&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.padding(bottom = 32.dp)&#10;                        )&#10;&#10;                        Text(&#10;                            text = &quot;Recording Status: $status&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;&#10;                        Button(&#10;                            onClick = { checkAndStartAudioService() },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Start Service&quot;)&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = { stopService(Intent(this@SecretSettingsActivity, AudioRecordingService::class.java)) },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Stop Service&quot;)&#10;                        }&#10;&#10;                        OutlinedButton(&#10;                            onClick = { finish() },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Close&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun checkAndStartAudioService() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) {&#10;            startAudioServiceInternal()&#10;        } else {&#10;            pendingStartService = true&#10;            requestAudioPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO)&#10;        }&#10;    }&#10;&#10;    private fun startAudioServiceInternal() {&#10;        // Ensure notification channel exists&#10;        NotificationHelper.createNotificationChannel(this)&#10;&#10;        val serviceIntent = Intent(this, AudioRecordingService::class.java)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            ContextCompat.startForegroundService(this, serviceIntent)&#10;        } else {&#10;            startService(serviceIntent)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/BootReceiver.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/BootReceiver.kt" />
              <option name="originalContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import com.example.aquatrack.R&#10;&#10;class BootReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(&quot;BootReceiver&quot;, &quot;Device booted. Showing notification to start service.&quot;)&#10;        showNotification(context)&#10;    }&#10;&#10;    private fun showNotification(context: Context) {&#10;        val channelId = &quot;aquatrack_boot&quot;&#10;        val channelName = &quot;Aqua Track&quot;&#10;        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager&#10;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                channelId,&#10;                channelName,&#10;                NotificationManager.IMPORTANCE_DEFAULT&#10;            )&#10;            channel.description = &quot;Aqua Track notification after boot&quot;&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;&#10;        val intentToStartService = Intent(context, NotificationActionReceiver::class.java)&#10;        val pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            0,&#10;            intentToStartService,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;&#10;        val notification = NotificationCompat.Builder(context, channelId)&#10;            .setSmallIcon(R.drawable.ic_gear) // Replace with your gear icon drawable&#10;            .setContentTitle(&quot;Aqua Track&quot;)&#10;            .setContentText(&quot;Tap to activate service.&quot;)&#10;            .setPriority(NotificationCompat.PRIORITY_DEFAULT)&#10;            .setContentIntent(pendingIntent)&#10;            .setAutoCancel(true)&#10;            .build()&#10;&#10;        notificationManager.notify(1001, notification)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import com.example.aquatrack.R&#10;&#10;class BootReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(&quot;BootReceiver&quot;, &quot;Device booted. Showing notification to start service.&quot;)&#10;        showNotification(context)&#10;    }&#10;&#10;    private fun showNotification(context: Context) {&#10;        val channelId = &quot;aquatrack_boot&quot;&#10;        val channelName = &quot;Aqua Track&quot;&#10;        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager&#10;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                channelId,&#10;                channelName,&#10;                NotificationManager.IMPORTANCE_DEFAULT&#10;            )&#10;            channel.description = &quot;Aqua Track notification after boot&quot;&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;&#10;        val intentToStartService = Intent(context, NotificationActionReceiver::class.java)&#10;        val pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            0,&#10;            intentToStartService,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;&#10;        val notification = NotificationCompat.Builder(context, channelId)&#10;            .setSmallIcon(android.R.drawable.ic_dialog_info) // Temporary system icon&#10;            .setContentTitle(&quot;Aqua Track&quot;)&#10;            .setContentText(&quot;Tap to activate service.&quot;)&#10;            .setPriority(NotificationCompat.PRIORITY_DEFAULT)&#10;            .setContentIntent(pendingIntent)&#10;            .setAutoCancel(true)&#10;            .build()&#10;&#10;        notificationManager.notify(1001, notification)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/NotificationActionReceiver.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/NotificationActionReceiver.kt" />
              <option name="originalContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.core.content.ContextCompat&#10;import com.example.aquatrack.recording.AudioRecordingService&#10;import com.example.aquatrack.util.NetworkManager&#10;import com.example.aquatrack.util.NotificationHelper&#10;&#10;class NotificationActionReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(TAG, &quot;Notification action received&quot;)&#10;&#10;        // Check network availability before starting service&#10;        if (!NetworkManager.isNetworkAvailable(context)) {&#10;            NotificationHelper.showNotification(&#10;                context = context,&#10;                title = &quot;Network Unavailable&quot;,&#10;                content = &quot;Please check your internet connection and try again&quot;,&#10;                notificationId = NETWORK_ERROR_NOTIFICATION_ID&#10;            )&#10;            return&#10;        }&#10;&#10;        val serviceIntent = Intent(context, AudioRecordingService::class.java)&#10;&#10;        try {&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                ContextCompat.startForegroundService(context, serviceIntent)&#10;            } else {&#10;                context.startService(serviceIntent)&#10;            }&#10;            Log.d(TAG, &quot;Service started successfully&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to start service&quot;, e)&#10;            NotificationHelper.showNotification(&#10;                context = context,&#10;                title = &quot;Service Error&quot;,&#10;                content = &quot;Failed to start recording service&quot;,&#10;                notificationId = SERVICE_ERROR_NOTIFICATION_ID&#10;            )&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val TAG = &quot;NotificationReceiver&quot;&#10;        private const val NETWORK_ERROR_NOTIFICATION_ID = 2001&#10;        private const val SERVICE_ERROR_NOTIFICATION_ID = 2002&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.core.content.ContextCompat&#10;import com.example.aquatrack.recording.AudioRecordingService&#10;import com.example.aquatrack.util.NetworkManager&#10;import com.example.aquatrack.util.NotificationHelper&#10;&#10;class NotificationActionReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(TAG, &quot;Notification action received&quot;)&#10;&#10;        // Check network availability before starting service&#10;        if (!NetworkManager.isNetworkAvailable(context)) {&#10;            NotificationHelper.showNotification(&#10;                context = context,&#10;                title = &quot;Network Unavailable&quot;,&#10;                content = &quot;Please check your internet connection and try again&quot;,&#10;                notificationId = NETWORK_ERROR_NOTIFICATION_ID&#10;            )&#10;            return&#10;        }&#10;&#10;        // Check RECORD_AUDIO permission before starting service&#10;        if (ContextCompat.checkSelfPermission(context, android.Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {&#10;            NotificationHelper.showNotification(&#10;                context = context,&#10;                title = &quot;Microphone Permission Required&quot;,&#10;                content = &quot;Please grant microphone permission to start recording&quot;,&#10;                notificationId = NETWORK_ERROR_NOTIFICATION_ID&#10;            )&#10;            Log.e(TAG, &quot;RECORD_AUDIO permission not granted. Service not started.&quot;)&#10;            return&#10;        }&#10;&#10;        val serviceIntent = Intent(context, AudioRecordingService::class.java)&#10;&#10;        try {&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;                ContextCompat.startForegroundService(context, serviceIntent)&#10;            } else {&#10;                context.startService(serviceIntent)&#10;            }&#10;            Log.d(TAG, &quot;Service started successfully&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Failed to start service&quot;, e)&#10;            NotificationHelper.showNotification(&#10;                context = context,&#10;                title = &quot;Service Error&quot;,&#10;                content = &quot;Failed to start recording service&quot;,&#10;                notificationId = SERVICE_ERROR_NOTIFICATION_ID&#10;            )&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val TAG = &quot;NotificationReceiver&quot;&#10;        private const val NETWORK_ERROR_NOTIFICATION_ID = 2001&#10;        private const val SERVICE_ERROR_NOTIFICATION_ID = 2002&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/util/ScreenSizeUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/util/ScreenSizeUtil.kt" />
              <option name="originalContent" value="package com.example.aquatrack.util&#10;&#10;import android.content.res.Configuration&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalConfiguration&#10;&#10;object ScreenSizeUtil {&#10;    @Composable&#10;    fun isTablet(): Boolean {&#10;        val configuration = LocalConfiguration.current&#10;        return configuration.screenLayout and&#10;                Configuration.SCREENLAYOUT_SIZE_MASK &gt;=&#10;                Configuration.SCREENLAYOUT_SIZE_LARGE&#10;    }&#10;&#10;    @Composable&#10;    fun isInLandscape(): Boolean {&#10;        val configuration = LocalConfiguration.current&#10;        return configuration.orientation == Configuration.ORIENTATION_LANDSCAPE&#10;    }&#10;&#10;    @Composable&#10;    fun getScreenWidthDp(): Int {&#10;        return LocalConfiguration.current.screenWidthDp&#10;    }&#10;&#10;    @Composable&#10;    fun getScreenHeightDp(): Int {&#10;        return LocalConfiguration.current.screenHeightDp&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.aquatrack.util&#10;&#10;import android.content.res.Configuration&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalConfiguration&#10;&#10;@Composable&#10;fun isTablet(): Boolean {&#10;    val configuration = LocalConfiguration.current&#10;    return configuration.screenLayout and&#10;        Configuration.SCREENLAYOUT_SIZE_MASK &gt;=&#10;        Configuration.SCREENLAYOUT_SIZE_LARGE&#10;}&#10;&#10;@Composable&#10;fun isInLandscape(): Boolean {&#10;    val configuration = LocalConfiguration.current&#10;    return configuration.orientation == Configuration.ORIENTATION_LANDSCAPE&#10;}&#10;&#10;@Composable&#10;fun getScreenWidthDp(): Int {&#10;    return LocalConfiguration.current.screenWidthDp&#10;}&#10;&#10;@Composable&#10;fun getScreenHeightDp(): Int {&#10;    return LocalConfiguration.current.screenHeightDp&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/edittext_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/edittext_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot;/&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot;/&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/blue_primary&quot;/&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/spinner_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/spinner_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot;/&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot;/&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/blue_accent&quot;/&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_account.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_account.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@color/white&quot;&gt;&#10;&#10;    &lt;androidx.appcompat.widget.Toolbar&#10;        android:id=&quot;@+id/toolbarAccount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@color/blue_primary&quot;&#10;        app:title=&quot;Aquatrack - Accounts&quot;&#10;        app:titleTextColor=&quot;@color/white&quot;&#10;        app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;20dp&quot;&gt;&#10;&#10;            &lt;!-- Sales &amp; Expenses Cards Side by Side --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:layout_marginBottom=&quot;24dp&quot;&gt;&#10;&#10;                &lt;com.google.android.material.card.MaterialCardView&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    app:cardCornerRadius=&quot;16dp&quot;&#10;                    app:cardElevation=&quot;4dp&quot;&#10;                    app:strokeColor=&quot;@color/blue_primary&quot;&#10;                    app:strokeWidth=&quot;1dp&quot;&#10;                    app:cardBackgroundColor=&quot;@color/white&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&gt;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;vertical&quot;&#10;                        android:padding=&quot;10dp&quot;&gt;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Total Sales :&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textColor=&quot;@color/blue_primary&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:fontFamily=&quot;sans-serif-medium&quot;&#10;                            android:gravity=&quot;center&quot;&#10;                            android:padding=&quot;4dp&quot;/&gt;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/textSalesTotal&quot;&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;-&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textColor=&quot;@color/blue_dark&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:fontFamily=&quot;sans-serif-medium&quot;&#10;                            android:gravity=&quot;center&quot;&#10;                            android:padding=&quot;8dp&quot;&#10;                            android:maxLines=&quot;2&quot;&#10;                            android:ellipsize=&quot;end&quot;/&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;                &lt;com.google.android.material.card.MaterialCardView&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    app:cardCornerRadius=&quot;16dp&quot;&#10;                    app:cardElevation=&quot;4dp&quot;&#10;                    app:strokeColor=&quot;@color/blue_primary&quot;&#10;                    app:strokeWidth=&quot;1dp&quot;&#10;                    app:cardBackgroundColor=&quot;@color/white&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&gt;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;vertical&quot;&#10;                        android:padding=&quot;10dp&quot;&gt;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Total Expenses :&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textColor=&quot;@color/blue_primary&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:fontFamily=&quot;sans-serif-medium&quot;&#10;                            android:gravity=&quot;center&quot;&#10;                            android:padding=&quot;4dp&quot;/&gt;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/textExpensesTotal&quot;&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;-&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textColor=&quot;@color/blue_dark&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:fontFamily=&quot;sans-serif-medium&quot;&#10;                            android:gravity=&quot;center&quot;&#10;                            android:padding=&quot;8dp&quot;&#10;                            android:maxLines=&quot;2&quot;&#10;                            android:ellipsize=&quot;end&quot;/&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Add Sale Form --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Add Sale&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Spinner&#10;                android:id=&quot;@+id/spinnerProduct&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;@drawable/spinner_whiteborder&quot;&#10;                android:paddingLeft=&quot;12dp&quot;&#10;                android:paddingRight=&quot;12dp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Sale Quantity&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editSaleQuantity&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;number&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Purchase Amount&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editPurchaseAmount&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;numberDecimal&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Sale Amount&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editSaleAmount&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;numberDecimal&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/buttonSelectSaleDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;Choose Sale Date&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:backgroundTint=&quot;@color/blue_button&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                app:elevation=&quot;2dp&quot;&#10;                app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot;&#10;                app:iconGravity=&quot;textStart&quot;&#10;                app:iconPadding=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;2dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textSaleDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;No date selected&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:paddingLeft=&quot;2dp&quot;&#10;                android:paddingTop=&quot;2dp&quot;&#10;                android:paddingBottom=&quot;12dp&quot;&#10;                android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/buttonAddSale&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;54dp&quot;&#10;                android:text=&quot;Add Sale&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:backgroundTint=&quot;@color/blue_primary&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                app:elevation=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&#10;                android:fontFamily=&quot;sans-serif-medium&quot;/&gt;&#10;&#10;            &lt;!-- Add Expense Form --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Add Expense&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Expense Description&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editExpenseDesc&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;text&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Expense Amount&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editExpenseAmount&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;numberDecimal&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/buttonSelectExpenseDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;Choose Expense Date&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:backgroundTint=&quot;@color/blue_button&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                app:elevation=&quot;2dp&quot;&#10;                app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot;&#10;                app:iconGravity=&quot;textStart&quot;&#10;                app:iconPadding=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;2dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textExpenseDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;No date selected&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:paddingLeft=&quot;2dp&quot;&#10;                android:paddingTop=&quot;2dp&quot;&#10;                android:paddingBottom=&quot;12dp&quot;&#10;                android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/buttonAddExpense&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;54dp&quot;&#10;                android:text=&quot;Add Expense&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:backgroundTint=&quot;@color/blue_primary&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                app:elevation=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&#10;                android:fontFamily=&quot;sans-serif-medium&quot;/&gt;&#10;&#10;            &lt;!-- Transaction History --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textTransactionHistory&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Transaction History (Last 15 Days)&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:paddingTop=&quot;12dp&quot;&#10;                android:fontFamily=&quot;sans-serif-medium&quot; /&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:id=&quot;@+id/layoutTransactionHistory&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/transparent&quot;&#10;                android:paddingTop=&quot;8dp&quot;/&gt;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@color/white&quot;&gt;&#10;&#10;    &lt;androidx.appcompat.widget.Toolbar&#10;        android:id=&quot;@+id/toolbarAccount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;@color/blue_primary&quot;&#10;        app:title=&quot;Aquatrack - Accounts&quot;&#10;        app:titleTextColor=&quot;@color/white&quot;&#10;        app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;20dp&quot;&gt;&#10;&#10;            &lt;!-- Sales &amp; Expenses Cards Side by Side --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:layout_marginBottom=&quot;24dp&quot;&gt;&#10;&#10;                &lt;com.google.android.material.card.MaterialCardView&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    app:cardCornerRadius=&quot;16dp&quot;&#10;                    app:cardElevation=&quot;4dp&quot;&#10;                    app:strokeColor=&quot;@color/blue_primary&quot;&#10;                    app:strokeWidth=&quot;1dp&quot;&#10;                    app:cardBackgroundColor=&quot;@color/white&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&gt;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;vertical&quot;&#10;                        android:padding=&quot;10dp&quot;&gt;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Total Sales :&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textColor=&quot;@color/blue_primary&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:fontFamily=&quot;sans-serif-medium&quot;&#10;                            android:gravity=&quot;center&quot;&#10;                            android:padding=&quot;4dp&quot;/&gt;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/textSalesTotal&quot;&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;-&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textColor=&quot;@color/blue_dark&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:fontFamily=&quot;sans-serif-medium&quot;&#10;                            android:gravity=&quot;center&quot;&#10;                            android:padding=&quot;8dp&quot;&#10;                            android:maxLines=&quot;2&quot;&#10;                            android:ellipsize=&quot;end&quot;/&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;                &lt;com.google.android.material.card.MaterialCardView&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    app:cardCornerRadius=&quot;16dp&quot;&#10;                    app:cardElevation=&quot;4dp&quot;&#10;                    app:strokeColor=&quot;@color/blue_primary&quot;&#10;                    app:strokeWidth=&quot;1dp&quot;&#10;                    app:cardBackgroundColor=&quot;@color/white&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&gt;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;vertical&quot;&#10;                        android:padding=&quot;10dp&quot;&gt;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Total Expenses :&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textColor=&quot;@color/blue_primary&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:fontFamily=&quot;sans-serif-medium&quot;&#10;                            android:gravity=&quot;center&quot;&#10;                            android:padding=&quot;4dp&quot;/&gt;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/textExpensesTotal&quot;&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;-&quot;&#10;                            android:textSize=&quot;18sp&quot;&#10;                            android:textColor=&quot;@color/blue_dark&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:fontFamily=&quot;sans-serif-medium&quot;&#10;                            android:gravity=&quot;center&quot;&#10;                            android:padding=&quot;8dp&quot;&#10;                            android:maxLines=&quot;2&quot;&#10;                            android:ellipsize=&quot;end&quot;/&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Add Sale Form --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Add Sale&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Spinner&#10;                android:id=&quot;@+id/spinnerProduct&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;@drawable/spinner_whiteborder&quot;&#10;                android:paddingLeft=&quot;12dp&quot;&#10;                android:paddingRight=&quot;12dp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Sale Quantity&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editSaleQuantity&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;number&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Purchase Amount&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editPurchaseAmount&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;numberDecimal&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Sale Amount&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editSaleAmount&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;numberDecimal&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/buttonSelectSaleDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;Choose Sale Date&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:backgroundTint=&quot;@color/blue_button&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                app:elevation=&quot;2dp&quot;&#10;                app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot;&#10;                app:iconGravity=&quot;textStart&quot;&#10;                app:iconPadding=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;2dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textSaleDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;No date selected&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:paddingLeft=&quot;2dp&quot;&#10;                android:paddingTop=&quot;2dp&quot;&#10;                android:paddingBottom=&quot;12dp&quot;&#10;                android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/buttonAddSale&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;54dp&quot;&#10;                android:text=&quot;Add Sale&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:backgroundTint=&quot;@color/blue_primary&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                app:elevation=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&#10;                android:fontFamily=&quot;sans-serif-medium&quot;/&gt;&#10;&#10;            &lt;!-- Add Expense Form --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Add Expense&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Expense Description&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editExpenseDesc&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;text&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Expense Amount&quot;&#10;                app:boxBackgroundMode=&quot;outline&quot;&#10;                app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                app:boxBackgroundColor=&quot;@color/white&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/editExpenseAmount&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;numberDecimal&quot;&#10;                    android:textColorHint=&quot;@color/blue_grey&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/buttonSelectExpenseDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;Choose Expense Date&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:backgroundTint=&quot;@color/blue_button&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                app:elevation=&quot;2dp&quot;&#10;                app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot;&#10;                app:iconGravity=&quot;textStart&quot;&#10;                app:iconPadding=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;2dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textExpenseDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;No date selected&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:paddingLeft=&quot;2dp&quot;&#10;                android:paddingTop=&quot;2dp&quot;&#10;                android:paddingBottom=&quot;12dp&quot;&#10;                android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/buttonAddExpense&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;54dp&quot;&#10;                android:text=&quot;Add Expense&quot;&#10;                app:cornerRadius=&quot;12dp&quot;&#10;                app:backgroundTint=&quot;@color/blue_primary&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                app:elevation=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&#10;                android:fontFamily=&quot;sans-serif-medium&quot;/&gt;&#10;&#10;            &lt;!-- Transaction History --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textTransactionHistory&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Transaction History (Last 15 Days)&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textColor=&quot;@color/blue_primary&quot;&#10;                android:paddingTop=&quot;12dp&quot;&#10;                android:fontFamily=&quot;sans-serif-medium&quot; /&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:id=&quot;@+id/layoutTransactionHistory&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/transparent&quot;&#10;                android:paddingTop=&quot;8dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_admin.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_admin.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/buttonProduction&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Production&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/buttonStock&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Stock&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/buttonTester&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Tester&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/buttonAccount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Account&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_transaction.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_transaction.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;12dp&quot;&#10;    android:background=&quot;@android:color/white&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textType&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Type&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@color/blue_primary&quot;&#10;        android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textDesc&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Description&quot;&#10;        android:textColor=&quot;@color/blue_dark&quot;&#10;        android:textSize=&quot;15sp&quot;&#10;        android:paddingTop=&quot;2dp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textAmount&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Amount&quot;&#10;        android:textColor=&quot;@color/blue_primary&quot;&#10;        android:textSize=&quot;15sp&quot;&#10;        android:paddingTop=&quot;2dp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textDate&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Date&quot;&#10;        android:textColor=&quot;@color/blue_grey&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:paddingTop=&quot;2dp&quot;/&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/menu_stock.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/menu_stock.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;        android:showAsAction=&quot;always&quot; /&gt;&#10;        android:showAsAction=&quot;always&quot; /&gt;&#10;        android:showAsAction=&quot;always&quot; /&gt;&#10;        android:showAsAction=&quot;always&quot; /&gt;&#10;        android:showAsAction=&quot;always&quot; /&gt;&#10;        android:showAsAction=&quot;always&quot; /&gt;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_refresh&quot;&#10;        android:icon=&quot;@drawable/ic_refresh_blue&quot;&#10;        android:title=&quot;Refresh&quot;&#10;        android:orderInCategory=&quot;100&quot;&#10;        app:showAsAction=&quot;always&quot; /&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.12.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;appcompat = &quot;1.7.1&quot;&#10;material = &quot;1.12.0&quot;&#10;composeCompiler = &quot;1.5.11&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose.compiler&quot;, version.ref = &quot;composeCompiler&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.12.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;appcompat = &quot;1.7.1&quot;&#10;material = &quot;1.12.0&quot;&#10;composeCompiler = &quot;1.5.11&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose.compiler&quot;, version.ref = &quot;composeCompiler&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version = &quot;2.0.0&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>