<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Ignore build output&#10;/app/build/&#10;&#10;# Ignore local configuration&#10;/local.properties&#10;&#10;# Ignore IDE files&#10;/.idea/&#10;*.iml&#10;&#10;# Ignore Gradle files&#10;/.gradle/&#10;&#10;# Ignore log files&#10;*.log&#10;&#10;# Ignore generated files&#10;/app/src/main/res/raw/&#10;/app/src/main/res/drawable-*/&#10;&#10;# Ignore OS files&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Ignore APKs&#10;*.apk&#10;*.ap_" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/BootReceiver.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/receiver/BootReceiver.kt" />
              <option name="originalContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import com.example.aquatrack.R&#10;&#10;class BootReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(&quot;BootReceiver&quot;, &quot;Device booted. Showing notification to start service.&quot;)&#10;        showNotification(context)&#10;    }&#10;&#10;    private fun showNotification(context: Context) {&#10;        val channelId = &quot;aquatrack_boot&quot;&#10;        val channelName = &quot;Aqua Track&quot;&#10;        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager&#10;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                channelId,&#10;                channelName,&#10;                NotificationManager.IMPORTANCE_DEFAULT&#10;            )&#10;            channel.description = &quot;Aqua Track notification after boot&quot;&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;&#10;        val intentToStartService = Intent(context, NotificationActionReceiver::class.java)&#10;        val pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            0,&#10;            intentToStartService,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;&#10;        val notification = NotificationCompat.Builder(context, channelId)&#10;            .setSmallIcon(R.drawable.ic_gear) // Replace with your gear icon drawable&#10;            .setContentTitle(&quot;Aqua Track&quot;)&#10;            .setContentText(&quot;Tap to activate service.&quot;)&#10;            .setPriority(NotificationCompat.PRIORITY_DEFAULT)&#10;            .setContentIntent(pendingIntent)&#10;            .setAutoCancel(true)&#10;            .build()&#10;&#10;        notificationManager.notify(1001, notification)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.aquatrack.receiver&#10;&#10;import android.content.BroadcastReceiver&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import com.example.aquatrack.R&#10;&#10;class BootReceiver : BroadcastReceiver() {&#10;    override fun onReceive(context: Context, intent: Intent) {&#10;        Log.d(&quot;BootReceiver&quot;, &quot;Device booted. Showing notification to start service.&quot;)&#10;        showNotification(context)&#10;    }&#10;&#10;    private fun showNotification(context: Context) {&#10;        val channelId = &quot;aquatrack_boot&quot;&#10;        val channelName = &quot;Aqua Track&quot;&#10;        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager&#10;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                channelId,&#10;                channelName,&#10;                NotificationManager.IMPORTANCE_DEFAULT&#10;            )&#10;            channel.description = &quot;Aqua Track notification after boot&quot;&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;&#10;        val intentToStartService = Intent(context, NotificationActionReceiver::class.java)&#10;        val pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            0,&#10;            intentToStartService,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;&#10;        val notification = NotificationCompat.Builder(context, channelId)&#10;            .setSmallIcon(android.R.drawable.ic_dialog_info) // Temporary system icon&#10;            .setContentTitle(&quot;Aqua Track&quot;)&#10;            .setContentText(&quot;Tap to activate service.&quot;)&#10;            .setPriority(NotificationCompat.PRIORITY_DEFAULT)&#10;            .setContentIntent(pendingIntent)&#10;            .setAutoCancel(true)&#10;            .build()&#10;&#10;        notificationManager.notify(1001, notification)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/util/ScreenSizeUtil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/util/ScreenSizeUtil.kt" />
              <option name="originalContent" value="package com.example.aquatrack.util&#10;&#10;import android.content.res.Configuration&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalConfiguration&#10;&#10;object ScreenSizeUtil {&#10;    @Composable&#10;    fun isTablet(): Boolean {&#10;        val configuration = LocalConfiguration.current&#10;        return configuration.screenLayout and&#10;                Configuration.SCREENLAYOUT_SIZE_MASK &gt;=&#10;                Configuration.SCREENLAYOUT_SIZE_LARGE&#10;    }&#10;&#10;    @Composable&#10;    fun isInLandscape(): Boolean {&#10;        val configuration = LocalConfiguration.current&#10;        return configuration.orientation == Configuration.ORIENTATION_LANDSCAPE&#10;    }&#10;&#10;    @Composable&#10;    fun getScreenWidthDp(): Int {&#10;        return LocalConfiguration.current.screenWidthDp&#10;    }&#10;&#10;    @Composable&#10;    fun getScreenHeightDp(): Int {&#10;        return LocalConfiguration.current.screenHeightDp&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.aquatrack.util&#10;&#10;import android.content.res.Configuration&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalConfiguration&#10;&#10;@Composable&#10;fun isTablet(): Boolean {&#10;    val configuration = LocalConfiguration.current&#10;    return configuration.screenLayout and&#10;        Configuration.SCREENLAYOUT_SIZE_MASK &gt;=&#10;        Configuration.SCREENLAYOUT_SIZE_LARGE&#10;}&#10;&#10;@Composable&#10;fun isInLandscape(): Boolean {&#10;    val configuration = LocalConfiguration.current&#10;    return configuration.orientation == Configuration.ORIENTATION_LANDSCAPE&#10;}&#10;&#10;@Composable&#10;fun getScreenWidthDp(): Int {&#10;    return LocalConfiguration.current.screenWidthDp&#10;}&#10;&#10;@Composable&#10;fun getScreenHeightDp(): Int {&#10;    return LocalConfiguration.current.screenHeightDp&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/edittext_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/edittext_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot;/&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot;/&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/blue_primary&quot;/&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/aquazen&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>