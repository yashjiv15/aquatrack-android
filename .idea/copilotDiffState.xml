<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.aquatrack&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.aquatrack&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;&#10;&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.aquatrack&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.aquatrack&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.9.3&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/LoginActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/LoginActivity.kt" />
              <option name="originalContent" value="package com.example.aquatrack&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.aquatrack.api.ApiService&#10;import com.example.aquatrack.api.LoginRequest&#10;import com.example.aquatrack.api.LoginResponse&#10;import okhttp3.OkHttpClient&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;    private lateinit var apiService: ApiService&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_login)&#10;&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.1.7:8000/api/&quot;)&#10;            .client(OkHttpClient())&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        apiService = retrofit.create(ApiService::class.java)&#10;&#10;        val phoneEditText = findViewById&lt;EditText&gt;(R.id.editTextPhone)&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.editTextPassword)&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.buttonLogin)&#10;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.aquatrack&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.aquatrack.api.ApiService&#10;import com.example.aquatrack.api.LoginRequest&#10;import com.example.aquatrack.api.LoginResponse&#10;import okhttp3.OkHttpClient&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class LoginActivity : AppCompatActivity() {&#10;    private lateinit var apiService: ApiService&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_login)&#10;&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.1.7:8000/api/&quot;)&#10;            .client(OkHttpClient())&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        apiService = retrofit.create(ApiService::class.java)&#10;&#10;        val phoneEditText = findViewById&lt;EditText&gt;(R.id.editTextPhone)&#10;        val passwordEditText = findViewById&lt;EditText&gt;(R.id.editTextPassword)&#10;        val loginButton = findViewById&lt;Button&gt;(R.id.buttonLogin)&#10;&#10;        // Set default values&#10;        phoneEditText.setText(&quot;9834464841&quot;)&#10;        passwordEditText.setText(&quot;123&quot;)&#10;&#10;        loginButton.setOnClickListener {&#10;            val phone = phoneEditText.text.toString()&#10;            val password = passwordEditText.text.toString()&#10;            val request = LoginRequest(phone, password)&#10;            apiService.login(request).enqueue(object : Callback&lt;LoginResponse&gt; {&#10;                override fun onResponse(call: Call&lt;LoginResponse&gt;, response: Response&lt;LoginResponse&gt;) {&#10;                    if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                        val loginResponse = response.body()!!&#10;                        // Save token and user info as needed&#10;                        if (loginResponse.user_role == &quot;production&quot;) {&#10;                            val intent = Intent(this@LoginActivity, ProductionActivity::class.java)&#10;                            intent.putExtra(&quot;access_token&quot;, loginResponse.access_token)&#10;                            startActivity(intent)&#10;                            finish()&#10;                        } else {&#10;                            Toast.makeText(this@LoginActivity, &quot;Unauthorized role&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    } else {&#10;                        val errorBody = response.errorBody()?.string()&#10;                        val code = response.code()&#10;                        Toast.makeText(this@LoginActivity, &quot;Login failed: HTTP $code\n$errorBody&quot;, Toast.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;                override fun onFailure(call: Call&lt;LoginResponse&gt;, t: Throwable) {&#10;                    Toast.makeText(this@LoginActivity, &quot;Network error: ${t.localizedMessage}&quot;, Toast.LENGTH_LONG).show()&#10;                    t.printStackTrace()&#10;                }&#10;            })&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/ProductionActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/aquatrack/ProductionActivity.kt" />
              <option name="originalContent" value="package com.example.aquatrack&#10;&#10;import android.app.DatePickerDialog&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.widget.*&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.aquatrack.api.ApiService&#10;import com.example.aquatrack.api.Order&#10;import okhttp3.OkHttpClient&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class ProductionActivity : AppCompatActivity() {&#10;    private lateinit var apiService: ApiService&#10;    private lateinit var orderSpinner: Spinner&#10;    private lateinit var producedQuantityEditText: EditText&#10;    private lateinit var dateButton: Button&#10;    private lateinit var selectedDateText: TextView&#10;    private lateinit var orderDetailsText: TextView&#10;    private var orders: List&lt;Order&gt; = emptyList()&#10;    private var selectedOrder: Order? = null&#10;    private var selectedDate: String = &quot;&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_production)&#10;&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.1.7:8000/api/&quot;)&#10;            .client(OkHttpClient())&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        apiService = retrofit.create(ApiService::class.java)&#10;&#10;        orderSpinner = findViewById(R.id.spinnerOrder)&#10;        producedQuantityEditText = findViewById(R.id.editTextProducedQuantity)&#10;        dateButton = findViewById(R.id.buttonSelectDate)&#10;        selectedDateText = findViewById(R.id.textSelectedDate)&#10;        orderDetailsText = findViewById(R.id.textOrderDetails)&#10;&#10;        // Fetch orders for dropdown&#10;        fun fetchOrders() {&#10;            apiService.getOrders().enqueue(object : Callback&lt;List&lt;Order&gt;&gt; {&#10;                override fun onResponse(call: Call&lt;List&lt;Order&gt;&gt;, response: Response&lt;List&lt;Order&gt;&gt;) {&#10;                    if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                        orders = response.body()!!&#10;                            .sortedByDescending { it.created_at ?: &quot;&quot; }&#10;                        val orderDisplayList = mutableListOf(&quot;Select an order...&quot;)&#10;                        orderDisplayList.addAll(orders.map {&#10;                            val date = it.created_at ?: &quot;&quot;&#10;                            &quot;${it.product.product_name} - ${it.order_quantity} ${it.product.quantity_type} - $date&quot;&#10;                        })&#10;                        orderDisplayList.add(&quot;None&quot;) // Add OTHER option&#10;                        val adapter = ArrayAdapter(this@ProductionActivity, android.R.layout.simple_spinner_item, orderDisplayList)&#10;                        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;                        orderSpinner.adapter = adapter&#10;                        orderSpinner.setSelection(0) // No selection by default&#10;                        orderDetailsText.text = &quot;Order details will appear here.&quot;&#10;                    }&#10;                }&#10;                override fun onFailure(call: Call&lt;List&lt;Order&gt;&gt;, t: Throwable) {&#10;                    Toast.makeText(this@ProductionActivity, &quot;Failed to load orders&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            })&#10;        }&#10;&#10;        fetchOrders()&#10;&#10;        val refreshButton = findViewById&lt;ImageButton&gt;(R.id.buttonRefreshOrders)&#10;        refreshButton.setOnClickListener {&#10;            fetchOrders()&#10;        }&#10;&#10;        orderSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: android.view.View?, position: Int, id: Long) {&#10;                when (position) {&#10;                    0 -&gt; {&#10;                        // No selection&#10;                        orderDetailsText.text = &quot;Order details will appear here.&quot;&#10;                        selectedOrder = null&#10;                    }&#10;                    orders.size + 1 -&gt; {&#10;                        // OTHER selected&#10;                        orderDetailsText.text = &quot;Other order selected. Please enter details manually.&quot;&#10;                        selectedOrder = null&#10;                    }&#10;                    else -&gt; {&#10;                        selectedOrder = orders.getOrNull(position - 1)&#10;                        selectedOrder?.let {&#10;                            orderDetailsText.text = &quot;Product: ${it.product.product_name}\nQuantity: ${it.order_quantity} ${it.product.quantity_type}&quot;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {&#10;                orderDetailsText.text = &quot;Order details will appear here.&quot;&#10;                selectedOrder = null&#10;            }&#10;        }&#10;&#10;        dateButton.setOnClickListener {&#10;            val calendar = Calendar.getInstance()&#10;            val datePicker = DatePickerDialog(this, { _, year, month, dayOfMonth -&gt;&#10;                val sdf = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.US)&#10;                calendar.set(year, month, dayOfMonth)&#10;                selectedDate = sdf.format(calendar.time)&#10;                selectedDateText.text = &quot;Selected Date: $selectedDate&quot;&#10;            }, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH))&#10;            datePicker.show()&#10;        }&#10;&#10;        val submitButton = findViewById&lt;Button&gt;(R.id.buttonSubmitProduction)&#10;        submitButton.setOnClickListener {&#10;            val selectedPosition = orderSpinner.selectedItemPosition&#10;            val producedQuantityText = producedQuantityEditText.text.toString()&#10;            val date = selectedDate&#10;            if (selectedPosition &lt;= 0) {&#10;                Toast.makeText(this, &quot;Please select an order.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            if (orderSpinner.adapter.getItem(selectedPosition) == &quot;None&quot;) {&#10;                Toast.makeText(this, &quot;Manual entry for 'None' is not supported yet.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            val order = orders.getOrNull(selectedPosition - 1)&#10;            if (order == null) {&#10;                Toast.makeText(this, &quot;Invalid order selection.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            if (producedQuantityText.isBlank() || date.isBlank()) {&#10;                Toast.makeText(this, &quot;Please enter produced quantity and select a date.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            val producedQuantity = producedQuantityText.toDoubleOrNull()&#10;            if (producedQuantity == null) {&#10;                Toast.makeText(this, &quot;Invalid produced quantity.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            val request = com.example.aquatrack.api.CreateProductionRequest(&#10;                order_id = order.order_id,&#10;                produced_quantity = producedQuantity,&#10;                created_at = date&#10;            )&#10;            apiService.createProduction(request).enqueue(object : Callback&lt;com.example.aquatrack.api.CreateProductionResponse&gt; {&#10;                override fun onResponse(call: Call&lt;com.example.aquatrack.api.CreateProductionResponse&gt;, response: Response&lt;com.example.aquatrack.api.CreateProductionResponse&gt;) {&#10;                    if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                        Toast.makeText(this@ProductionActivity, &quot;Production record created successfully!&quot;, Toast.LENGTH_LONG).show()&#10;                        fetchProductionHistory() // Refresh history after submit&#10;                    } else {&#10;                        Toast.makeText(this@ProductionActivity, &quot;Failed to create production: ${response.code()} ${response.errorBody()?.string()}&quot;, Toast.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;                override fun onFailure(call: Call&lt;com.example.aquatrack.api.CreateProductionResponse&gt;, t: Throwable) {&#10;                    Toast.makeText(this@ProductionActivity, &quot;Network error: ${t.localizedMessage}&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            })&#10;        }&#10;&#10;        fetchProductionHistory()&#10;    }&#10;&#10;    private fun fetchProductionHistory() {&#10;        val historyLayout = findViewById&lt;LinearLayout&gt;(R.id.layoutProductionHistory)&#10;        historyLayout.removeAllViews()&#10;        apiService.getRecentProductions().enqueue(object : Callback&lt;List&lt;com.example.aquatrack.api.CreateProductionResponse&gt;&gt; {&#10;            override fun onResponse(call: Call&lt;List&lt;com.example.aquatrack.api.CreateProductionResponse&gt;&gt;, response: Response&lt;List&lt;com.example.aquatrack.api.CreateProductionResponse&gt;&gt;) {&#10;                if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                    val productions = response.body()!!&#10;                    if (productions.isEmpty()) {&#10;                        val emptyView = TextView(this@ProductionActivity)&#10;                        emptyView.text = &quot;No history available yet.&quot;&#10;                        emptyView.setTextColor(resources.getColor(R.color.on_background, null))&#10;                        emptyView.setPadding(16, 16, 16, 16)&#10;                        historyLayout.addView(emptyView)&#10;                    } else {&#10;                        productions.forEach {&#10;                            val card = LinearLayout(this@ProductionActivity)&#10;                            card.orientation = LinearLayout.VERTICAL&#10;                            card.setBackgroundResource(R.drawable.card_bg_blue)&#10;                            card.setPadding(32, 24, 32, 24)&#10;                            card.elevation = 8f&#10;                            val accentBar = View(this@ProductionActivity)&#10;                            val accentParams = LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, 8)&#10;                            accentBar.setBackgroundColor(resources.getColor(R.color.blue_primary, null))&#10;                            accentBar.layoutParams = accentParams&#10;                            card.addView(accentBar)&#10;                    }&#10;                            dateView.text = it.created_at ?: &quot;&quot;&#10;                    val errorView = TextView(this@ProductionActivity)&#10;                    errorView.text = &quot;Failed to load history.&quot;&#10;                            dateView.setPadding(0, 12, 0, 4)&#10;                }&#10;            }&#10;            override fun onFailure(call: Call&lt;List&lt;com.example.aquatrack.api.CreateProductionResponse&gt;&gt;, t: Throwable) {&#10;                val errorView = TextView(this@ProductionActivity)&#10;                errorView.text = &quot;Network error: ${t.localizedMessage}&quot;&#10;                errorView.setTextColor(resources.getColor(R.color.on_background, null))&#10;                errorView.setPadding(16, 16, 16, 16)&#10;                            infoView.setPadding(0, 0, 0, 12)&#10;                            card.addView(dateView)&#10;                            card.addView(infoView)&#10;                            card.setPadding(0, 0, 0, 32)&#10;                            historyLayout.addView(card)&#10;&#10;" />
              <option name="updatedContent" value="package com.example.aquatrack&#10;&#10;import android.app.DatePickerDialog&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.widget.*&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.aquatrack.api.ApiService&#10;import com.example.aquatrack.api.Order&#10;import okhttp3.OkHttpClient&#10;import retrofit2.Call&#10;import retrofit2.Callback&#10;import retrofit2.Response&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class ProductionActivity : AppCompatActivity() {&#10;    private lateinit var apiService: ApiService&#10;    private lateinit var orderSpinner: Spinner&#10;    private lateinit var producedQuantityEditText: EditText&#10;    private lateinit var dateButton: Button&#10;    private lateinit var selectedDateText: TextView&#10;    private lateinit var orderDetailsText: TextView&#10;    private var orders: List&lt;Order&gt; = emptyList()&#10;    private var selectedOrder: Order? = null&#10;    private var selectedDate: String = &quot;&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_production)&#10;&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.1.7:8000/api/&quot;)&#10;            .client(OkHttpClient())&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        apiService = retrofit.create(ApiService::class.java)&#10;&#10;        orderSpinner = findViewById(R.id.spinnerOrder)&#10;        producedQuantityEditText = findViewById(R.id.editTextProducedQuantity)&#10;        dateButton = findViewById(R.id.buttonSelectDate)&#10;        selectedDateText = findViewById(R.id.textSelectedDate)&#10;        orderDetailsText = findViewById(R.id.textOrderDetails)&#10;&#10;        // Fetch orders for dropdown&#10;        fun fetchOrders() {&#10;            apiService.getOrders().enqueue(object : Callback&lt;List&lt;Order&gt;&gt; {&#10;                override fun onResponse(call: Call&lt;List&lt;Order&gt;&gt;, response: Response&lt;List&lt;Order&gt;&gt;) {&#10;                    if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                        orders = response.body()!!&#10;                            .sortedByDescending { it.created_at ?: &quot;&quot; }&#10;                        val orderDisplayList = mutableListOf(&quot;Select an order...&quot;)&#10;                        orderDisplayList.addAll(orders.map {&#10;                            val date = it.created_at ?: &quot;&quot;&#10;                            &quot;${it.product.product_name} - ${it.order_quantity} ${it.product.quantity_type} - $date&quot;&#10;                        })&#10;                        orderDisplayList.add(&quot;None&quot;) // Add OTHER option&#10;                        val adapter = ArrayAdapter(this@ProductionActivity, android.R.layout.simple_spinner_item, orderDisplayList)&#10;                        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;                        orderSpinner.adapter = adapter&#10;                        orderSpinner.setSelection(0) // No selection by default&#10;                        orderDetailsText.text = &quot;Order details will appear here.&quot;&#10;                    }&#10;                }&#10;                override fun onFailure(call: Call&lt;List&lt;Order&gt;&gt;, t: Throwable) {&#10;                    Toast.makeText(this@ProductionActivity, &quot;Failed to load orders&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            })&#10;        }&#10;&#10;        fetchOrders()&#10;&#10;        val refreshButton = findViewById&lt;ImageButton&gt;(R.id.buttonRefreshOrders)&#10;        refreshButton.setOnClickListener {&#10;            fetchOrders()&#10;        }&#10;&#10;        orderSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: android.view.View?, position: Int, id: Long) {&#10;                when (position) {&#10;                    0 -&gt; {&#10;                        // No selection&#10;                        orderDetailsText.text = &quot;Order details will appear here.&quot;&#10;                        selectedOrder = null&#10;                    }&#10;                    orders.size + 1 -&gt; {&#10;                        // OTHER selected&#10;                        orderDetailsText.text = &quot;Other order selected. Please enter details manually.&quot;&#10;                        selectedOrder = null&#10;                    }&#10;                    else -&gt; {&#10;                        selectedOrder = orders.getOrNull(position - 1)&#10;                        selectedOrder?.let {&#10;                            orderDetailsText.text = &quot;Product: ${it.product.product_name}\nQuantity: ${it.order_quantity} ${it.product.quantity_type}&quot;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {&#10;                orderDetailsText.text = &quot;Order details will appear here.&quot;&#10;                selectedOrder = null&#10;            }&#10;        }&#10;&#10;        dateButton.setOnClickListener {&#10;            val calendar = Calendar.getInstance()&#10;            val datePicker = DatePickerDialog(this, { _, year, month, dayOfMonth -&gt;&#10;                val sdf = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.US)&#10;                calendar.set(year, month, dayOfMonth)&#10;                selectedDate = sdf.format(calendar.time)&#10;                selectedDateText.text = &quot;Selected Date: $selectedDate&quot;&#10;            }, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH))&#10;            datePicker.show()&#10;        }&#10;&#10;        val submitButton = findViewById&lt;Button&gt;(R.id.buttonSubmitProduction)&#10;        submitButton.setOnClickListener {&#10;            val selectedPosition = orderSpinner.selectedItemPosition&#10;            val producedQuantityText = producedQuantityEditText.text.toString()&#10;            val date = selectedDate&#10;            if (selectedPosition &lt;= 0) {&#10;                Toast.makeText(this, &quot;Please select an order.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            if (orderSpinner.adapter.getItem(selectedPosition) == &quot;None&quot;) {&#10;                Toast.makeText(this, &quot;Manual entry for 'None' is not supported yet.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            val order = orders.getOrNull(selectedPosition - 1)&#10;            if (order == null) {&#10;                Toast.makeText(this, &quot;Invalid order selection.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            if (producedQuantityText.isBlank() || date.isBlank()) {&#10;                Toast.makeText(this, &quot;Please enter produced quantity and select a date.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            val producedQuantity = producedQuantityText.toDoubleOrNull()&#10;            if (producedQuantity == null) {&#10;                Toast.makeText(this, &quot;Invalid produced quantity.&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;            val request = com.example.aquatrack.api.CreateProductionRequest(&#10;                order_id = order.order_id,&#10;                produced_quantity = producedQuantity,&#10;                created_at = date&#10;            )&#10;            apiService.createProduction(request).enqueue(object : Callback&lt;com.example.aquatrack.api.CreateProductionResponse&gt; {&#10;                override fun onResponse(call: Call&lt;com.example.aquatrack.api.CreateProductionResponse&gt;, response: Response&lt;com.example.aquatrack.api.CreateProductionResponse&gt;) {&#10;                    if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                        Toast.makeText(this@ProductionActivity, &quot;Production record created successfully!&quot;, Toast.LENGTH_LONG).show()&#10;                        // Reset all fields after successful submit&#10;                        orderSpinner.setSelection(0)&#10;                        producedQuantityEditText.text.clear()&#10;                        selectedDate = &quot;&quot;&#10;                        selectedDateText.text = &quot;No date selected&quot;&#10;                        orderDetailsText.text = &quot;Order details will appear here.&quot;&#10;                        fetchProductionHistory() // Refresh history after submit&#10;                    } else {&#10;                        Toast.makeText(this@ProductionActivity, &quot;Failed to create production: ${response.code()} ${response.errorBody()?.string()}&quot;, Toast.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;                override fun onFailure(call: Call&lt;com.example.aquatrack.api.CreateProductionResponse&gt;, t: Throwable) {&#10;                    Toast.makeText(this@ProductionActivity, &quot;Network error: ${t.localizedMessage}&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            })&#10;        }&#10;&#10;        fetchProductionHistory()&#10;    }&#10;&#10;    private fun fetchProductionHistory() {&#10;        val historyLayout = findViewById&lt;LinearLayout&gt;(R.id.layoutProductionHistory)&#10;        historyLayout.removeAllViews()&#10;        apiService.getRecentProductions().enqueue(object : Callback&lt;List&lt;com.example.aquatrack.api.CreateProductionResponse&gt;&gt; {&#10;            override fun onResponse(call: Call&lt;List&lt;com.example.aquatrack.api.CreateProductionResponse&gt;&gt;, response: Response&lt;List&lt;com.example.aquatrack.api.CreateProductionResponse&gt;&gt;) {&#10;                if (response.isSuccessful &amp;&amp; response.body() != null) {&#10;                    val productions = response.body()!!&#10;                    if (productions.isEmpty()) {&#10;                        val emptyView = TextView(this@ProductionActivity)&#10;                        emptyView.text = &quot;No history available yet.&quot;&#10;                        emptyView.setTextColor(resources.getColor(R.color.on_background, null))&#10;                        emptyView.setPadding(16, 16, 16, 16)&#10;                        historyLayout.addView(emptyView)&#10;                    } else {&#10;                        productions.forEach {&#10;                            // Create MaterialCardView programmatically&#10;                            val cardView = com.google.android.material.card.MaterialCardView(this@ProductionActivity)&#10;                            val cardParams = LinearLayout.LayoutParams(&#10;                                LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                LinearLayout.LayoutParams.WRAP_CONTENT&#10;                            )&#10;                            cardParams.setMargins(0, 0, 0, 24)&#10;                            cardView.layoutParams = cardParams&#10;                            cardView.radius = 16f&#10;                            cardView.cardElevation = 8f&#10;                            cardView.setStrokeColor(resources.getColor(R.color.blue_primary, null))&#10;                            cardView.strokeWidth = 2&#10;                            cardView.setCardBackgroundColor(resources.getColor(R.color.white, null))&#10;&#10;                            val innerLayout = LinearLayout(this@ProductionActivity)&#10;                            innerLayout.orientation = LinearLayout.VERTICAL&#10;                            innerLayout.setPadding(32, 24, 32, 24)&#10;&#10;                            // Format date&#10;                            val rawDate = it.created_at ?: &quot;&quot;&#10;                            val formattedDate = try {&#10;                                val parser = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, Locale.US)&#10;                                val dateObj = parser.parse(rawDate)&#10;                                SimpleDateFormat(&quot;dd MMM yyyy&quot;, Locale.US).format(dateObj)&#10;                            } catch (e: Exception) {&#10;                                rawDate&#10;                            }&#10;&#10;                            val dateView = TextView(this@ProductionActivity)&#10;                            dateView.text = formattedDate&#10;                            dateView.setTextColor(resources.getColor(R.color.blue_primary, null))&#10;                            dateView.textSize = 16f&#10;                            dateView.setTypeface(null, android.graphics.Typeface.BOLD)&#10;                            dateView.setPadding(0, 0, 0, 4)&#10;&#10;                            val productName = it.order?.product?.product_name ?: &quot;Unknown&quot;&#10;                            val quantityType = it.order?.product?.quantity_type ?: &quot;&quot;&#10;                            val info = &quot;$productName | ${it.produced_quantity} $quantityType&quot;&#10;                            val infoView = TextView(this@ProductionActivity)&#10;                            infoView.text = info&#10;                            infoView.setTextColor(resources.getColor(R.color.on_background, null))&#10;                            infoView.textSize = 18f&#10;                            infoView.setPadding(0, 0, 0, 8)&#10;&#10;                            innerLayout.addView(dateView)&#10;                            innerLayout.addView(infoView)&#10;                            cardView.addView(innerLayout)&#10;                            historyLayout.addView(cardView)&#10;                        }&#10;                    }&#10;                } else {&#10;                    val errorView = TextView(this@ProductionActivity)&#10;                    errorView.text = &quot;Failed to load history.&quot;&#10;                    errorView.setTextColor(resources.getColor(R.color.on_background, null))&#10;                    errorView.setPadding(16, 16, 16, 16)&#10;                    historyLayout.addView(errorView)&#10;                }&#10;            }&#10;            override fun onFailure(call: Call&lt;List&lt;com.example.aquatrack.api.CreateProductionResponse&gt;&gt;, t: Throwable) {&#10;                val errorView = TextView(this@ProductionActivity)&#10;                errorView.text = &quot;Network error: ${t.localizedMessage}&quot;&#10;                errorView.setTextColor(resources.getColor(R.color.on_background, null))&#10;                errorView.setPadding(16, 16, 16, 16)&#10;                historyLayout.addView(errorView)&#10;            }&#10;        })&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/card_bg_blue.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/card_bg_blue.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;    &lt;padding android:left=&quot;8dp&quot; android:top=&quot;8dp&quot; android:right=&quot;8dp&quot; android:bottom=&quot;8dp&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/blue_primary&quot; /&gt;&#10;    &lt;size android:height=&quot;wrap_content&quot; android:width=&quot;match_parent&quot; /&gt;&#10;    &lt;shadow android:color=&quot;#22000000&quot; android:radius=&quot;8&quot; android:dx=&quot;0&quot; android:dy=&quot;2&quot; /&gt;&#10;    &lt;size android:height=&quot;wrap_content&quot; android:width=&quot;match_parent&quot; /&gt;&#10;&#10;    &lt;shadow android:color=&quot;#22000000&quot; android:radius=&quot;8&quot; android:dx=&quot;0&quot; android:dy=&quot;2&quot; /&gt;&#10;&lt;/shape&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;    &lt;padding android:left=&quot;8dp&quot; android:top=&quot;8dp&quot; android:right=&quot;8dp&quot; android:bottom=&quot;8dp&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/blue_primary&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/edittext_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/edittext_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot;/&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot;/&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/blue_primary&quot;/&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/spinner_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/spinner_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot;/&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot;/&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/blue_accent&quot;/&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_production.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_production.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/white&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;20dp&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:strokeColor=&quot;@color/blue_primary&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            app:cardBackgroundColor=&quot;@color/white&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:padding=&quot;18dp&quot;&gt;&#10;&#10;                &lt;!-- Select Order --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Select Order&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot;&#10;                    android:paddingBottom=&quot;4dp&quot;/&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:paddingBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;Spinner&#10;                        android:id=&quot;@+id/spinnerOrder&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;48dp&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:background=&quot;@drawable/spinner_whiteborder&quot;&#10;                        android:paddingLeft=&quot;12dp&quot;&#10;                        android:paddingRight=&quot;12dp&quot;/&gt;&#10;&#10;                    &lt;ImageButton&#10;                        android:id=&quot;@+id/buttonRefreshOrders&quot;&#10;                        android:layout_width=&quot;44dp&quot;&#10;                        android:layout_height=&quot;44dp&quot;&#10;                        android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                        android:src=&quot;@drawable/ic_refresh_blue&quot;&#10;                        android:contentDescription=&quot;Refresh Orders&quot;&#10;                        app:tint=&quot;@color/blue_primary&quot;&#10;                        android:padding=&quot;8dp&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textOrderDetails&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Order details will appear here.&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:paddingBottom=&quot;16dp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;&#10;                &lt;!-- Produced Quantity --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Produced Quantity&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot;&#10;                    android:paddingBottom=&quot;4dp&quot;/&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Enter produced quantity&quot;&#10;                    app:boxBackgroundMode=&quot;outline&quot;&#10;                    app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                    app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                    app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                    app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                    app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                    app:boxBackgroundColor=&quot;@color/white&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/editTextProducedQuantity&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;48dp&quot;&#10;                        android:inputType=&quot;number&quot;&#10;                        android:textColorHint=&quot;@color/blue_grey&quot;&#10;                        android:textColor=&quot;@color/blue_dark&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;!-- Select Date (vertical stack) --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Select Date&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot;&#10;                    android:paddingBottom=&quot;4dp&quot;/&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/buttonSelectDate&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:text=&quot;Choose Date&quot;&#10;                    app:cornerRadius=&quot;12dp&quot;&#10;                    app:backgroundTint=&quot;@color/blue_button&quot;&#10;                    android:textColor=&quot;@color/white&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    app:elevation=&quot;2dp&quot;&#10;                    app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot;&#10;                    app:iconGravity=&quot;textStart&quot;&#10;                    app:iconPadding=&quot;8dp&quot;&#10;                    android:layout_marginBottom=&quot;2dp&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textSelectedDate&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;No date selected&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:paddingLeft=&quot;2dp&quot;&#10;                    android:paddingTop=&quot;2dp&quot;&#10;                    android:paddingBottom=&quot;12dp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;&#10;                &lt;!-- Submit Button --&gt;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/buttonSubmitProduction&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;54dp&quot;&#10;                    android:text=&quot;Submit Production&quot;&#10;                    app:cornerRadius=&quot;12dp&quot;&#10;                    app:backgroundTint=&quot;@color/blue_primary&quot;&#10;                    android:textColor=&quot;@color/white&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    app:elevation=&quot;4dp&quot;&#10;                    android:layout_marginBottom=&quot;20dp&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot;/&gt;&#10;&#10;                &lt;!-- Production History --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textProductionHistory&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Production History (Last 15 Days)&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textSize=&quot;20sp&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:paddingTop=&quot;12dp&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot; /&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/layoutProductionHistory&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:background=&quot;@android:color/transparent&quot;&#10;                    android:paddingTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/white&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;20dp&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&#10;            app:strokeColor=&quot;@color/blue_primary&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            app:cardBackgroundColor=&quot;@color/white&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:padding=&quot;18dp&quot;&gt;&#10;&#10;                &lt;!-- Select Order --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Select Order&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot;&#10;                    android:paddingBottom=&quot;4dp&quot;/&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:paddingBottom=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;Spinner&#10;                        android:id=&quot;@+id/spinnerOrder&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;48dp&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:background=&quot;@drawable/spinner_whiteborder&quot;&#10;                        android:paddingLeft=&quot;12dp&quot;&#10;                        android:paddingRight=&quot;12dp&quot;/&gt;&#10;&#10;                    &lt;ImageButton&#10;                        android:id=&quot;@+id/buttonRefreshOrders&quot;&#10;                        android:layout_width=&quot;44dp&quot;&#10;                        android:layout_height=&quot;44dp&quot;&#10;                        android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                        android:src=&quot;@drawable/ic_refresh_blue&quot;&#10;                        android:contentDescription=&quot;Refresh Orders&quot;&#10;                        app:tint=&quot;@color/blue_primary&quot;&#10;                        android:padding=&quot;8dp&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textOrderDetails&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Order details will appear here.&quot;&#10;                    android:textColor=&quot;@color/blue_dark&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:paddingBottom=&quot;16dp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;&#10;                &lt;!-- Produced Quantity --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Produced Quantity&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot;&#10;                    android:paddingBottom=&quot;4dp&quot;/&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Enter produced quantity&quot;&#10;                    app:boxBackgroundMode=&quot;outline&quot;&#10;                    app:boxStrokeColor=&quot;@color/blue_primary&quot;&#10;                    app:boxCornerRadiusTopStart=&quot;12dp&quot;&#10;                    app:boxCornerRadiusTopEnd=&quot;12dp&quot;&#10;                    app:boxCornerRadiusBottomStart=&quot;12dp&quot;&#10;                    app:boxCornerRadiusBottomEnd=&quot;12dp&quot;&#10;                    app:boxBackgroundColor=&quot;@color/white&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/editTextProducedQuantity&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:inputType=&quot;number&quot;&#10;                        android:textColorHint=&quot;@color/blue_grey&quot;&#10;                        android:textColor=&quot;@color/blue_dark&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;!-- Select Date (vertical stack) --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Select Date&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot;&#10;                    android:paddingBottom=&quot;4dp&quot;/&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/buttonSelectDate&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:text=&quot;Choose Date&quot;&#10;                    app:cornerRadius=&quot;12dp&quot;&#10;                    app:backgroundTint=&quot;@color/blue_button&quot;&#10;                    android:textColor=&quot;@color/white&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    app:elevation=&quot;2dp&quot;&#10;                    app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot;&#10;                    app:iconGravity=&quot;textStart&quot;&#10;                    app:iconPadding=&quot;8dp&quot;&#10;                    android:layout_marginBottom=&quot;2dp&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textSelectedDate&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;No date selected&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:paddingLeft=&quot;2dp&quot;&#10;                    android:paddingTop=&quot;2dp&quot;&#10;                    android:paddingBottom=&quot;12dp&quot;&#10;                    android:fontFamily=&quot;sans-serif&quot;/&gt;&#10;&#10;                &lt;!-- Submit Button --&gt;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/buttonSubmitProduction&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;54dp&quot;&#10;                    android:text=&quot;Submit Production&quot;&#10;                    app:cornerRadius=&quot;12dp&quot;&#10;                    app:backgroundTint=&quot;@color/blue_primary&quot;&#10;                    android:textColor=&quot;@color/white&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    app:elevation=&quot;4dp&quot;&#10;                    android:layout_marginBottom=&quot;20dp&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot;/&gt;&#10;&#10;                &lt;!-- Production History --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textProductionHistory&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Production History (Last 15 Days)&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textSize=&quot;20sp&quot;&#10;                    android:textColor=&quot;@color/blue_primary&quot;&#10;                    android:paddingTop=&quot;12dp&quot;&#10;                    android:fontFamily=&quot;sans-serif-medium&quot; /&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/layoutProductionHistory&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:background=&quot;@android:color/transparent&quot;&#10;                    android:paddingTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values-night/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values-night/themes.xml" />
              <option name="originalContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Theme.Aquatrack&quot; parent=&quot;Theme.MaterialComponents.DayNight.DarkActionBar&quot;&gt;&#10;        &lt;!-- Primary brand color. --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/purple_200&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/purple_700&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;!-- Secondary brand color. --&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/teal_200&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryVariant&quot;&gt;@color/teal_200&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/black&lt;/item&gt;&#10;        &lt;!-- Status bar color. --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;?attr/colorPrimaryVariant&lt;/item&gt;&#10;        &lt;!-- Customize your theme here. --&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Theme.Aquatrack&quot; parent=&quot;Theme.MaterialComponents.DayNight.DarkActionBar&quot;&gt;&#10;        &lt;!-- Primary brand color. --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/blue_primary&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/blue_dark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/on_primary&lt;/item&gt;&#10;        &lt;!-- Secondary brand color. --&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/blue_accent&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryVariant&quot;&gt;@color/blue_button&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/on_primary&lt;/item&gt;&#10;        &lt;!-- Status bar color. --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/blue_dark&lt;/item&gt;&#10;        &lt;!-- Customize your theme here. --&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;blue_primary&quot;&gt;#2563EB&lt;/color&gt;&#10;    &lt;color name=&quot;blue_button&quot;&gt;#2563EB&lt;/color&gt;&#10;    &lt;color name=&quot;blue_grey&quot;&gt;#DBEAFE&lt;/color&gt;&#10;    &lt;color name=&quot;blue_dark&quot;&gt;#2563EB&lt;/color&gt;&#10;    &lt;color name=&quot;on_primary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;blue_accent&quot;&gt;#2563EB&lt;/color&gt;&#10;    &lt;color name=&quot;background&quot;&gt;#E5E7EB&lt;/color&gt;&#10;    &lt;color name=&quot;surface&quot;&gt;#DBEAFE&lt;/color&gt;&#10;    &lt;color name=&quot;on_background&quot;&gt;#222B45&lt;/color&gt;&#10;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;blue_primary&quot;&gt;#2563EB&lt;/color&gt;&#10;    &lt;color name=&quot;blue_button&quot;&gt;#2563EB&lt;/color&gt;&#10;    &lt;color name=&quot;blue_grey&quot;&gt;#DBEAFE&lt;/color&gt;&#10;    &lt;color name=&quot;blue_dark&quot;&gt;#2563EB&lt;/color&gt;&#10;    &lt;color name=&quot;on_primary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;blue_accent&quot;&gt;#2563EB&lt;/color&gt;&#10;    &lt;color name=&quot;background&quot;&gt;#E5E7EB&lt;/color&gt;&#10;    &lt;color name=&quot;surface&quot;&gt;#DBEAFE&lt;/color&gt;&#10;    &lt;color name=&quot;on_background&quot;&gt;#222B45&lt;/color&gt;&#10;    &lt;color name=&quot;card&quot;&gt;#DBEAFE&lt;/color&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>